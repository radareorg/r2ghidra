NAME=x86_32
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
x86:LE:32:default:gcc

uint main(void)

{
    uint32_t uVar1;
    uchar auStack_8c [16];
    uchar auStack_7c [120];
    
    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    *(uVar1 - 0x14) = 0x804856b;
    sym.imp.printf();
    *(uVar1 - 0x10) = "Password: ";
    *(uVar1 - 0x14) = 0x8048577;
    sym.imp.printf();
    *(uVar1 - 0xc) = &stack0xffffff84;
    *(uVar1 - 0x10) = 0x80486b2;
    *(uVar1 - 0x14) = 0x804858a;
    sym.imp.scanf();
    *(uVar1 - 0x10) = &stack0xffffff84;
    *((uVar1 - 0x10) + -4) = 0x8048595;
    sym.check();
    return 0;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN

NAME=x86_32
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
                                                |
    0x08048540 push ebp                         |uint main(void)
                                                |
                                                |{
                                                |    uint32_t uVar1;
                                                |    uchar auStack_8c [16];
                                                |    uchar auStack_7c [120];
                                                |    
    0x08048549 and esp, 0xfffffff0              |    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    0x0804855f mov dword [esp], str.IOLI_Crackme_Level_0x05_n    |    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    0x08048566 call sym.imp.printf              |    *(uVar1 - 0x14) = 0x804856b;
    0x08048566 call sym.imp.printf              |    sym.imp.printf();
    0x0804856b mov dword [esp], str.Password:    |    *(uVar1 - 0x10) = "Password: ";
    0x08048572 call sym.imp.printf              |    *(uVar1 - 0x14) = 0x8048577;
    0x08048572 call sym.imp.printf              |    sym.imp.printf();
    0x0804857a mov dword [esp + 4], eax         |    *(uVar1 - 0xc) = &stack0xffffff84;
    0x0804857e mov dword [esp], 0x80486b2       |    *(uVar1 - 0x10) = 0x80486b2;
    0x08048585 call sym.imp.scanf               |    *(uVar1 - 0x14) = 0x804858a;
    0x08048585 call sym.imp.scanf               |    sym.imp.scanf();
    0x0804858d mov dword [esp], eax             |    *(uVar1 - 0x10) = &stack0xffffff84;
    0x08048590 call sym.check                   |    *((uVar1 - 0x10) + -4) = 0x8048595;
    0x08048590 call sym.check                   |    sym.check();
    0x0804859b ret                              |    return 0;
                                                |}
                                                |
x86
x86:LE:32:default:gcc

uint main(void)

{
    uint32_t uVar1;
    uchar auStack_8c [16];
    uchar auStack_7c [120];
    
    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    *(uVar1 - 0x14) = 0x804856b;
    sym.imp.printf();
    *(uVar1 - 0x10) = "Password: ";
    *(uVar1 - 0x14) = 0x8048577;
    sym.imp.printf();
    *(uVar1 - 0xc) = &stack0xffffff84;
    *(uVar1 - 0x10) = 0x80486b2;
    *(uVar1 - 0x14) = 0x804858a;
    sym.imp.scanf();
    *(uVar1 - 0x10) = &stack0xffffff84;
    *((uVar1 - 0x10) + -4) = 0x8048595;
    sym.check();
    return 0;
}

EOF
CMDS=<<EOF
s main
af
pdga
e asm.arch
pdgss
pdg
EOF
RUN

NAME=x86_64
FILE=bins/elf/hello_world
EXPECT=<<EOF
x86:LE:64:default:gcc

void main(void)

{
    int iVar1;
    int iVar2;
    ulong uVar3;
    int64_t iVar4;
    uchar *puVar5;
    uchar *puVar6;
    uchar *puVar7;
    uchar *puVar8;
    ulong uStack_30;
    int iStack_28;
    int iStack_24;
    ulong uStack_20;
    ulong uStack_18;
    int64_t iStack_10;
    
    uStack_20 = 0x8d4;
    uStack_18 = 0x8da;
    *(*0x20 + -0x30) = 0x7d4;
    iStack_28 = sym.imp.strlen(0x8d4);
    uVar3 = uStack_18;
    puVar5 = *0x20 + -0x28;
    *(*0x20 + -0x28 + -8) = 0x7e3;
    iStack_24 = sym.imp.strlen(uVar3);
    iVar1 = iStack_28;
    iVar2 = iStack_24;
    puVar6 = puVar5;
    *(puVar5 + -8) = 0x7fb;
    iStack_10 = sym.imp.malloc(iVar2 + iVar1 + 1);
    if (iStack_10 != 0) {
        uVar3 = uStack_20;
        iVar4 = iStack_10;
        puVar7 = puVar6;
        *(puVar6 + -8) = 0x819;
        sym.imp.strcpy(iVar4,uVar3);
        uVar3 = uStack_18;
        iVar4 = iStack_10;
        puVar8 = puVar7;
        *(puVar7 + -8) = 0x82c;
        sym.imp.strcat(iVar4,uVar3);
        iVar4 = iStack_10;
        *(puVar8 + -8) = 0x838;
        sym.imp.puts(iVar4);
        iVar4 = iStack_10;
        *(puVar8 + -8) = 0x844;
        sym.imp.free(iVar4);
    }
    return;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN

NAME=x86_16
FILE=bins/mz/unzip.exe
EXPECT=<<EOF
x86:LE:16:Real Mode:

//WARNING: Unable to track spacebase fully for stack

uint fcn.00001c98(ushort param_1,ushort param_2,ushort param_3,uint param_4,int16_t param_5)

{
    int16_t *piVar1;
    int16_t iVar2;
    uchar *puVar3;
    uchar *puVar4;
    uchar *puVar5;
    uchar *puVar6;
    uchar *puVar7;
    ushort *puVar8;
    uchar *puVar9;
    uchar *puVar10;
    uchar *puVar11;
    ushort unaff_SI;
    ushort uVar12;
    ushort unaff_CS;
    ushort unaff_SS;
    ushort unaff_DS;
    int16_t aiStack_c [2];
    int16_t iStack_6;
    char8_t cStack_4;
    
    puVar11 = *0x10 + -0xc;
    *(*0x10 + -0xc) = unaff_SI;
    aiStack_c[1] = 0x13da;
    do {
        *(puVar11 + -2) = unaff_DS;
        *(puVar11 + -4) = 0x401e;
        *(puVar11 + -6) = unaff_DS;
        *(puVar11 + -8) = aiStack_c[1];
        *(puVar11 + -10) = unaff_CS;
        puVar3 = puVar11 + -0xc;
        *(puVar11 + -0xc) = 0x1cb7;
        func_0x0000ec24();
        *(puVar3 + 6) = unaff_DS;
        *(puVar3 + 4) = 0x401e;
        puVar4 = puVar3;
        *(puVar3 + 2) = param_3;
        *puVar3 = param_2;
        *(puVar4 + -2) = 0xdee;
        puVar5 = puVar4 + -4;
        *(puVar4 + -4) = 0x1cca;
        func_0x0000ec24();
        *(puVar5 + 6) = unaff_DS;
        *(puVar5 + 4) = 0x401e;
        *(puVar5 + 2) = 0xdee;
        puVar6 = puVar5;
        *puVar5 = 0x1cd7;
        func_0x0000e59a();
        puVar7 = puVar6 + 4;
        iStack_6 = 0;
        do {
            *(puVar7 + -2) = 0xdee;
            puVar8 = puVar7 + -4;
            puVar7 = puVar7 + -4;
            *puVar8 = 0x1ce4;
            cStack_4 = func_0x0000eb82();
            if (cStack_4 == '\r') {
                cStack_4 = '\n';
            }
            if (SBORROW2(iStack_6,param_5) != iStack_6 - param_5 < 0) {
                *(param_4 + iStack_6) = cStack_4;
                iStack_6 = iStack_6 + 1;
            }
        } while (cStack_4 != '\n');
        piVar1 = 0x4022;
        *piVar1 = *piVar1 + -1;
        if (*piVar1 < 0) {
            *(puVar7 + -2) = unaff_DS;
            *(puVar7 + -4) = 0x401e;
            *(puVar7 + -6) = 10;
            *(puVar7 + -8) = 0xdee;
            puVar9 = puVar7 + -10;
            *(puVar7 + -10) = 0x1d2e;
            func_0x0000e4ae();
            puVar7 = puVar9 + 6;
        }
        else {
            **0x401e = 10;
            *0x401e = *0x401e + 1;
        }
        *(puVar7 + -2) = unaff_DS;
        *(puVar7 + -4) = 0x401e;
        *(puVar7 + -6) = 0xdee;
        unaff_CS = 0xdee;
        puVar10 = puVar7 + -8;
        *(puVar7 + -8) = 0x1d3b;
        func_0x0000e59a();
        puVar11 = puVar10 + 4;
        aiStack_c[1] = 0x13db;
        uVar12 = param_4 >> 0x10;
        iVar2 = param_4;
    } while (*(iVar2 + iStack_6 + -1) != '\n');
    *(iVar2 + iStack_6 + -1) = 0;
    return CONCAT22(uVar12,iVar2);
}

EOF
CMDS=<<EOF
pdgss
s 0x1c98
af
pdg
EOF
RUN

NAME=x86_64
FILE=bins/elf/hello_world
EXPECT=<<EOF
x86:LE:64:default:gcc

void main(void)

{
    int iVar1;
    int iVar2;
    ulong uVar3;
    int64_t iVar4;
    uchar *puVar5;
    uchar *puVar6;
    uchar *puVar7;
    uchar *puVar8;
    ulong uStack_30;
    int iStack_28;
    int iStack_24;
    ulong uStack_20;
    ulong uStack_18;
    int64_t iStack_10;
    
    uStack_20 = 0x8d4;
    uStack_18 = 0x8da;
    *(*0x20 + -0x30) = 0x7d4;
    iStack_28 = sym.imp.strlen(0x8d4);
    uVar3 = uStack_18;
    puVar5 = *0x20 + -0x28;
    *(*0x20 + -0x28 + -8) = 0x7e3;
    iStack_24 = sym.imp.strlen(uVar3);
    iVar1 = iStack_28;
    iVar2 = iStack_24;
    puVar6 = puVar5;
    *(puVar5 + -8) = 0x7fb;
    iStack_10 = sym.imp.malloc(iVar2 + iVar1 + 1);
    if (iStack_10 != 0) {
        uVar3 = uStack_20;
        iVar4 = iStack_10;
        puVar7 = puVar6;
        *(puVar6 + -8) = 0x819;
        sym.imp.strcpy(iVar4,uVar3);
        uVar3 = uStack_18;
        iVar4 = iStack_10;
        puVar8 = puVar7;
        *(puVar7 + -8) = 0x82c;
        sym.imp.strcat(iVar4,uVar3);
        iVar4 = iStack_10;
        *(puVar8 + -8) = 0x838;
        sym.imp.puts(iVar4);
        iVar4 = iStack_10;
        *(puVar8 + -8) = 0x844;
        sym.imp.free(iVar4);
    }
    return;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN


NAME=6502
FILE=bins/prg/t01.prg
ARGS=-F prg
EXPECT=<<EOF
6502:LE:16:default:

void fcn.0000080e(void)

{
    uchar uVar1;
    uint8_t uVar2;
    
    uVar2 = 0xff;
    do {
        *(uVar2 + 0x3ff) = 0x41;
        uVar2 = uVar2 + -1;
    } while (uVar2 != 0);
    uVar1 = *0x824;
    uVar2 = 0xff;
    do {
        *(uVar2 + 0xd7ff) = uVar1;
        uVar2 = uVar2 + -1;
    } while (uVar2 != 0);
    return;
}

EOF
CMDS=<<EOF
pdgss
s 0x080e
af
pdg
EOF
RUN


NAME=rawptr
FILE=bins/dectest32
EXPECT=<<EOF

uint sym.get_global_array_entry(void)

{
    uint unaff_EBP;
    uint uStack_4;
    
    *(*0x10 + -4) = unaff_EBP;
    return *0x804c034;
}

--

uint sym.get_global_array_entry(void)

{
    uint unaff_EBP;
    uint uStack_4;
    
    *(*0x10 + -4) = unaff_EBP;
    return uRam0804c034;
}

EOF
CMDS=<<EOF
s sym.get_global_array_entry
af
e r2ghidra.rawptr=1
pdg
?e --
e r2ghidra.rawptr=0
pdg
EOF
RUN

NAME=global flag
FILE=bins/dectest32
EXPECT=<<EOF

uint sym.get_global_var(void)

{
    uint unaff_EBP;
    uint uStack_4;
    
    *(*0x10 + -4) = unaff_EBP;
    return _obj.global_var;
}

--

//WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint sym.get_global_var(void)

{
    uint unaff_EBP;
    uint uStack_4;
    
    *(*0x10 + -4) = unaff_EBP;
    return _obj.global_var;
}

EOF
CMDS=<<EOF
s sym.get_global_var
af
e r2ghidra.rawptr=1
pdg
?e --
e r2ghidra.rawptr=0
pdg
EOF
RUN

NAME=function variable annotations
FILE=bins/dectest64
EXPECT=<<EOF
{
  "code": "\nulong main(uint param_1,ulong param_2)\n\n{\n    ulong uVar1;\n    int64_t in_FS_OFFSET;\n    ulong uStack_40;\n    ulong uStack_38;\n    uint uStack_2c;\n    uchar auStack_28 [24];\n    int64_t iStack_10;\n    \n    iStack_10 = *(in_FS_OFFSET + 0x28);\n    uStack_38 = param_2;\n    uStack_2c = param_1;\n    *(*0x20 + -0x40) = 0x4011b1;\n    sym.Aeropause(&stack0xffffffffffffffd8,param_1,param_2);\n    uVar1 = 0;\n    if (iStack_10 != *(in_FS_OFFSET + 0x28)) {\n        *(*0x20 + -0x38 + -8) = 0x4011ca;\n        uVar1 = sym.imp.__stack_chk_fail();\n    }\n    return uVar1;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 6,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 7,
      "end": 11,
      "type": "function_name",
      "name": "main",
      "offset": 4198782
    },
    {
      "start": 7,
      "end": 11,
      "type": "offset",
      "offset": 4198782
    },
    {
      "start": 7,
      "end": 11,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 12,
      "end": 16,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 17,
      "end": 24,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 17,
      "end": 24,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 25,
      "end": 30,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 31,
      "end": 38,
      "type": "function_parameter",
      "name": "param_2"
    },
    {
      "start": 31,
      "end": 38,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 47,
      "end": 52,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 53,
      "end": 58,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 53,
      "end": 58,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 64,
      "end": 71,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 72,
      "end": 84,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 72,
      "end": 84,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 90,
      "end": 95,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 96,
      "end": 105,
      "type": "local_variable",
      "name": "uStack_40"
    },
    {
      "start": 96,
      "end": 105,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 111,
      "end": 116,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 117,
      "end": 126,
      "type": "local_variable",
      "name": "uStack_38"
    },
    {
      "start": 117,
      "end": 126,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 132,
      "end": 136,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 137,
      "end": 146,
      "type": "local_variable",
      "name": "uStack_2c"
    },
    {
      "start": 137,
      "end": 146,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 152,
      "end": 157,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 158,
      "end": 168,
      "type": "local_variable",
      "name": "auStack_28"
    },
    {
      "start": 158,
      "end": 168,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 170,
      "end": 172,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 179,
      "end": 186,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 187,
      "end": 196,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 187,
      "end": 196,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 207,
      "end": 216,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 207,
      "end": 216,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 217,
      "end": 218,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 219,
      "end": 220,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 221,
      "end": 233,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 221,
      "end": 233,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 234,
      "end": 235,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 236,
      "end": 240,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 207,
      "end": 241,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 247,
      "end": 256,
      "type": "local_variable",
      "name": "uStack_38"
    },
    {
      "start": 247,
      "end": 256,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 257,
      "end": 258,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 259,
      "end": 266,
      "type": "function_parameter",
      "name": "param_2"
    },
    {
      "start": 259,
      "end": 266,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 247,
      "end": 266,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 272,
      "end": 281,
      "type": "local_variable",
      "name": "uStack_2c"
    },
    {
      "start": 272,
      "end": 281,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 282,
      "end": 283,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 284,
      "end": 291,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 284,
      "end": 291,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 272,
      "end": 291,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 297,
      "end": 298,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 299,
      "end": 300,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 300,
      "end": 304,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 305,
      "end": 306,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 307,
      "end": 312,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 314,
      "end": 315,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 316,
      "end": 324,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 297,
      "end": 324,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 330,
      "end": 343,
      "type": "function_name",
      "name": "sym.Aeropause",
      "offset": 4199038
    },
    {
      "start": 330,
      "end": 343,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 344,
      "end": 345,
      "type": "offset",
      "offset": 4198819
    },
    {
      "start": 345,
      "end": 368,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 368,
      "end": 369,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 369,
      "end": 376,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 369,
      "end": 376,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 376,
      "end": 377,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 377,
      "end": 384,
      "type": "function_parameter",
      "name": "param_2"
    },
    {
      "start": 377,
      "end": 384,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 330,
      "end": 385,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 391,
      "end": 396,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 391,
      "end": 396,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 397,
      "end": 398,
      "type": "offset",
      "offset": 4198833
    },
    {
      "start": 399,
      "end": 400,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 391,
      "end": 400,
      "type": "offset",
      "offset": 4198833
    },
    {
      "start": 406,
      "end": 408,
      "type": "offset",
      "offset": 4198851
    },
    {
      "start": 406,
      "end": 408,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 410,
      "end": 419,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 410,
      "end": 419,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 420,
      "end": 422,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 423,
      "end": 424,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 425,
      "end": 437,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 425,
      "end": 437,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 438,
      "end": 439,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 440,
      "end": 444,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 457,
      "end": 458,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 459,
      "end": 460,
      "type": "offset",
      "offset": 4198786
    },
    {
      "start": 460,
      "end": 464,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 465,
      "end": 466,
      "type": "offset",
      "offset": 4198786
    },
    {
      "start": 467,
      "end": 472,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 473,
      "end": 474,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 475,
      "end": 477,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 479,
      "end": 480,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 481,
      "end": 489,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 457,
      "end": 489,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 499,
      "end": 504,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 499,
      "end": 504,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 505,
      "end": 506,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 507,
      "end": 531,
      "type": "function_name",
      "name": "sym.imp.__stack_chk_fail",
      "offset": 4198464
    },
    {
      "start": 507,
      "end": 531,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 499,
      "end": 533,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 545,
      "end": 551,
      "type": "offset",
      "offset": 4198859
    },
    {
      "start": 545,
      "end": 551,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 552,
      "end": 557,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 552,
      "end": 557,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 545,
      "end": 557,
      "type": "offset",
      "offset": 4198859
    }
  ]
}
EOF
CMDS=<<EOF
s main
af
pdgj~{}
EOF
RUN

NAME=global variable annotation
FILE=bins/dectest32
EXPECT=<<EOF
{
  "code": "\nuint sym.get_global_array_entry(void)\n\n{\n    uint unaff_EBP;\n    uint uStack_4;\n    \n    *(*0x10 + -4) = unaff_EBP;\n    return *0x804c034;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 5,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 6,
      "end": 32,
      "type": "function_name",
      "name": "sym.get_global_array_entry",
      "offset": 134517184
    },
    {
      "start": 6,
      "end": 32,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 6,
      "end": 32,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 33,
      "end": 37,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 46,
      "end": 50,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 51,
      "end": 60,
      "type": "local_variable",
      "name": "unaff_EBP"
    },
    {
      "start": 51,
      "end": 60,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 66,
      "end": 70,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 71,
      "end": 79,
      "type": "local_variable",
      "name": "uStack_4"
    },
    {
      "start": 71,
      "end": 79,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 90,
      "end": 91,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 92,
      "end": 93,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 93,
      "end": 97,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 98,
      "end": 99,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 100,
      "end": 102,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 104,
      "end": 105,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 106,
      "end": 115,
      "type": "local_variable",
      "name": "unaff_EBP"
    },
    {
      "start": 106,
      "end": 115,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 90,
      "end": 115,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 121,
      "end": 127,
      "type": "offset",
      "offset": 134517193
    },
    {
      "start": 121,
      "end": 127,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 128,
      "end": 129,
      "type": "offset",
      "offset": 134517187
    },
    {
      "start": 129,
      "end": 138,
      "type": "global_variable",
      "offset": 134529076
    },
    {
      "start": 129,
      "end": 138,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 121,
      "end": 138,
      "type": "offset",
      "offset": 134517193
    }
  ]
}
EOF
CMDS=<<EOF
s sym.get_global_array_entry
af
pdgj~{}
EOF
RUN

NAME=constant variable annotation
FILE=bins/dectest32
EXPECT=<<EOF
{
  "code": "\nvoid sym.PrintAmbassador(uint32_t param_1)\n\n{\n    uchar *puVar1;\n    char *apcStack_20 [5];\n    uchar auStack_c [8];\n    \n    *(*0x10 + -0x1c) = \"Ambassador value: \";\n    *(*0x10 + -0x20) = 0x8049234;\n    func_0x08049050();\n    puVar1 = &stack0xfffffff4;\n    if (param_1 < 5) {\n        puVar1 = &stack0xfffffff4;\n        switch(param_1) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n            *(&stack0xfffffff4 + -0x10) = \"pure\";\n            *(&stack0xfffffff4 + -0x14) = 0x804926e;\n            func_0x08049050();\n            puVar1 = &stack0xfffffff4 + 0;\n        }\n    }\n    else if (param_1 == 1000000) {\n        *(&stack0xfffffff4 + -0x10) = \"million\";\n        *(&stack0xfffffff4 + -0x14) = 0x80492c8;\n        func_0x08049050();\n        puVar1 = &stack0xfffffff4 + 0;\n    }\n    *(puVar1 + -0x10) = 10;\n    *(puVar1 + -0x14) = 0x80492d8;\n    func_0x08049090();\n    return;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 5,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 6,
      "end": 25,
      "type": "function_name",
      "name": "sym.PrintAmbassador",
      "offset": 134517281
    },
    {
      "start": 6,
      "end": 25,
      "type": "offset",
      "offset": 134517281
    },
    {
      "start": 6,
      "end": 25,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 26,
      "end": 34,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 35,
      "end": 42,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 35,
      "end": 42,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 51,
      "end": 56,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 58,
      "end": 64,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 58,
      "end": 64,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 70,
      "end": 74,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 76,
      "end": 87,
      "type": "local_variable",
      "name": "apcStack_20"
    },
    {
      "start": 76,
      "end": 87,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 89,
      "end": 90,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 97,
      "end": 102,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 103,
      "end": 112,
      "type": "local_variable",
      "name": "auStack_c"
    },
    {
      "start": 103,
      "end": 112,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 114,
      "end": 115,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 127,
      "end": 128,
      "type": "offset",
      "offset": 134517290
    },
    {
      "start": 129,
      "end": 130,
      "type": "offset",
      "offset": 134517290
    },
    {
      "start": 130,
      "end": 134,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 135,
      "end": 136,
      "type": "offset",
      "offset": 134517290
    },
    {
      "start": 137,
      "end": 142,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 144,
      "end": 145,
      "type": "offset",
      "offset": 134517290
    },
    {
      "start": 146,
      "end": 166,
      "type": "constant_variable",
      "offset": 134520840
    },
    {
      "start": 146,
      "end": 166,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 127,
      "end": 166,
      "type": "offset",
      "offset": 134517290
    },
    {
      "start": 172,
      "end": 173,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 174,
      "end": 175,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 175,
      "end": 179,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 180,
      "end": 181,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 182,
      "end": 187,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 189,
      "end": 190,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 191,
      "end": 200,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 172,
      "end": 200,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 206,
      "end": 221,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 206,
      "end": 221,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 206,
      "end": 223,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 229,
      "end": 235,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 229,
      "end": 235,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 236,
      "end": 237,
      "type": "offset",
      "offset": 134517300
    },
    {
      "start": 238,
      "end": 239,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 239,
      "end": 254,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 229,
      "end": 254,
      "type": "offset",
      "offset": 134517300
    },
    {
      "start": 260,
      "end": 262,
      "type": "offset",
      "offset": 134517307
    },
    {
      "start": 260,
      "end": 262,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 264,
      "end": 271,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 264,
      "end": 271,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 272,
      "end": 273,
      "type": "offset",
      "offset": 134517307
    },
    {
      "start": 274,
      "end": 275,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 287,
      "end": 293,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 287,
      "end": 293,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 294,
      "end": 295,
      "type": "offset",
      "offset": 134517332
    },
    {
      "start": 296,
      "end": 297,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 297,
      "end": 312,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 287,
      "end": 312,
      "type": "offset",
      "offset": 134517332
    },
    {
      "start": 322,
      "end": 328,
      "type": "offset",
      "offset": 134517332
    },
    {
      "start": 322,
      "end": 328,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 329,
      "end": 336,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 329,
      "end": 336,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 348,
      "end": 352,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 364,
      "end": 368,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 380,
      "end": 384,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 396,
      "end": 400,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 412,
      "end": 416,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 432,
      "end": 433,
      "type": "offset",
      "offset": 134517348
    },
    {
      "start": 434,
      "end": 435,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 435,
      "end": 450,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 451,
      "end": 452,
      "type": "offset",
      "offset": 134517348
    },
    {
      "start": 453,
      "end": 458,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 460,
      "end": 461,
      "type": "offset",
      "offset": 134517348
    },
    {
      "start": 462,
      "end": 468,
      "type": "constant_variable",
      "offset": 134520859
    },
    {
      "start": 462,
      "end": 468,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 432,
      "end": 468,
      "type": "offset",
      "offset": 134517348
    },
    {
      "start": 482,
      "end": 483,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 484,
      "end": 485,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 485,
      "end": 500,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 501,
      "end": 502,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 503,
      "end": 508,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 510,
      "end": 511,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 512,
      "end": 521,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 482,
      "end": 521,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 535,
      "end": 550,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 535,
      "end": 550,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 535,
      "end": 552,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 566,
      "end": 572,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 566,
      "end": 572,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 573,
      "end": 574,
      "type": "offset",
      "offset": 134517358
    },
    {
      "start": 575,
      "end": 576,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 576,
      "end": 591,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 592,
      "end": 593,
      "type": "offset",
      "offset": 134517358
    },
    {
      "start": 594,
      "end": 595,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 566,
      "end": 595,
      "type": "offset",
      "offset": 134517358
    },
    {
      "start": 617,
      "end": 621,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 622,
      "end": 624,
      "type": "offset",
      "offset": 134517341
    },
    {
      "start": 622,
      "end": 624,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 626,
      "end": 633,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 626,
      "end": 633,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 634,
      "end": 636,
      "type": "offset",
      "offset": 134517334
    },
    {
      "start": 637,
      "end": 644,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 656,
      "end": 657,
      "type": "offset",
      "offset": 134517438
    },
    {
      "start": 658,
      "end": 659,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 659,
      "end": 674,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 675,
      "end": 676,
      "type": "offset",
      "offset": 134517438
    },
    {
      "start": 677,
      "end": 682,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 684,
      "end": 685,
      "type": "offset",
      "offset": 134517438
    },
    {
      "start": 686,
      "end": 695,
      "type": "constant_variable",
      "offset": 134520894
    },
    {
      "start": 686,
      "end": 695,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 656,
      "end": 695,
      "type": "offset",
      "offset": 134517438
    },
    {
      "start": 705,
      "end": 706,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 707,
      "end": 708,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 708,
      "end": 723,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 724,
      "end": 725,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 726,
      "end": 731,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 733,
      "end": 734,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 735,
      "end": 744,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 705,
      "end": 744,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 754,
      "end": 769,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 754,
      "end": 769,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 754,
      "end": 771,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 781,
      "end": 787,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 781,
      "end": 787,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 788,
      "end": 789,
      "type": "offset",
      "offset": 134517448
    },
    {
      "start": 790,
      "end": 791,
      "type": "offset",
      "offset": 134517284
    },
    {
      "start": 791,
      "end": 806,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 807,
      "end": 808,
      "type": "offset",
      "offset": 134517448
    },
    {
      "start": 809,
      "end": 810,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 781,
      "end": 810,
      "type": "offset",
      "offset": 134517448
    },
    {
      "start": 822,
      "end": 823,
      "type": "offset",
      "offset": 134517457
    },
    {
      "start": 824,
      "end": 830,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 824,
      "end": 830,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 831,
      "end": 832,
      "type": "offset",
      "offset": 134517457
    },
    {
      "start": 833,
      "end": 838,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 840,
      "end": 841,
      "type": "offset",
      "offset": 134517457
    },
    {
      "start": 842,
      "end": 844,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 822,
      "end": 844,
      "type": "offset",
      "offset": 134517457
    },
    {
      "start": 850,
      "end": 851,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 852,
      "end": 858,
      "type": "local_variable",
      "name": "puVar1"
    },
    {
      "start": 852,
      "end": 858,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 859,
      "end": 860,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 861,
      "end": 866,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 868,
      "end": 869,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 870,
      "end": 879,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 850,
      "end": 879,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 885,
      "end": 900,
      "type": "function_name",
      "name": "",
      "offset": 134516880
    },
    {
      "start": 885,
      "end": 900,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 885,
      "end": 902,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 908,
      "end": 914,
      "type": "offset",
      "offset": 134517469
    },
    {
      "start": 908,
      "end": 914,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 908,
      "end": 914,
      "type": "offset",
      "offset": 134517469
    }
  ]
}
EOF
CMDS=<<EOF
s sym.PrintAmbassador
af
pdgj~{}
EOF
RUN

NAME=aeropause32 (many features combined)
FILE=bins/dectest32
EXPECT=<<EOF

void sym.Aeropause(uint32_t **param_1,uint32_t param_2,uint32_t param_3)

{
    uint32_t *puVar1;
    int iVar2;
    uchar *puVar3;
    uint32_t *apuStack_20 [5];
    uchar auStack_c [8];
    
    *(*0x10 + -0x1c) = 8;
    *(*0x10 + -0x20) = 0x80492ee;
    puVar1 = sym.imp.malloc();
    *param_1 = puVar1;
    **param_1 = param_2;
    (*param_1)[1] = param_3;
    if (**param_1 < 2) {
        param_1[2] = NULL;
        puVar3 = &stack0xfffffff4;
    }
    else {
        param_1[1] = *((*param_1)[1] + 4);
        puVar1 = param_1[1];
        *(&stack0xfffffff4 + -0xc) = 0x804a05c;
        *(&stack0xfffffff4 + -0x10) = puVar1;
        *(&stack0xfffffff4 + -0x14) = 0x804934d;
        iVar2 = sym.imp.strcmp();
        if (iVar2 == 0) {
            param_1[2] = 0x1;
            puVar3 = &stack0xfffffff4 + 0;
        }
        else {
            puVar1 = param_1[1];
            *(*0x10 + -0x18) = "dark";
            *(*0x10 + -0x1c) = puVar1;
            *(*0x10 + -0x20) = 0x8049374;
            iVar2 = sym.imp.strcmp();
            if (iVar2 == 0) {
                param_1[2] = 0x2;
                puVar3 = *0x10 + -0xc;
            }
            else {
                apuStack_20[1] = param_1[1];
                apuStack_20[2] = 0x804a067;
                apuStack_20[0] = 0x804939b;
                iVar2 = sym.imp.strcmp();
                puVar3 = &stack0xfffffff4;
                if (iVar2 == 0) {
                    param_1[2] = 0x3;
                    puVar3 = &stack0xfffffff4;
                }
                else {
                    param_1[2] = 0xf4240;
                }
            }
        }
    }
    puVar1 = param_1[2];
    if (puVar1 < 0x5) {
        switch(puVar1) {
        case NULL:
            *(puVar3 + -0x10) = "pure";
            *(puVar3 + -0x14) = 0x80493e7;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x1:
            *(puVar3 + -0x10) = "reason";
            *(puVar3 + -0x14) = 0x80493f9;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x2:
            *(puVar3 + -0x10) = "revolution";
            *(puVar3 + -0x14) = 0x804940b;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x3:
            *(puVar3 + -0x10) = "echoes";
            *(puVar3 + -0x14) = 0x804941d;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x4:
            *(puVar3 + -0x10) = "wall";
            *(puVar3 + -0x14) = 0x804942f;
            sym.imp.printf();
            puVar3 = puVar3;
        }
    }
    else if (puVar1 == 0xf4240) {
        *(puVar3 + -0x10) = "million";
        *(puVar3 + -0x14) = 0x8049441;
        sym.imp.printf();
        puVar3 = puVar3;
    }
    *(puVar3 + -0x10) = param_1[2];
    *(puVar3 + -0x14) = 0x8049456;
    sym.PrintAmbassador();
    return;
}

EOF
CMDS=<<EOF
aaa
to bins/types.h
s sym.Aeropause
afvb 8 bright Bright *
afvb 12 argc int32_t
afvb 16 argv const char **
pdg
EOF
RUN

NAME=aeropause64 (many features combined)
FILE=bins/dectest64
EXPECT=<<EOF

void sym.Aeropause(uint32_t **param_1,uint32_t param_2,ulong param_3)

{
    uint32_t uVar1;
    uint uVar2;
    int iVar3;
    uint32_t *puVar4;
    uchar *puVar5;
    ulong uStack_30;
    uchar auStack_28 [8];
    ulong uStack_20;
    uint32_t uStack_14;
    uint32_t **ppuStack_10;
    
    uStack_20 = param_3;
    uStack_14 = param_2;
    ppuStack_10 = param_1;
    *(*0x20 + -0x30) = 0x40129b;
    puVar4 = sym.imp.malloc(0x10);
    *ppuStack_10 = puVar4;
    **ppuStack_10 = uStack_14;
    *(*ppuStack_10 + 2) = uStack_20;
    if (**ppuStack_10 < 2) {
        *(ppuStack_10 + 2) = 0;
        puVar5 = &stack0xffffffffffffffd8;
    }
    else {
        ppuStack_10[1] = *(*(*ppuStack_10 + 2) + 8);
        puVar4 = ppuStack_10[1];
        *(&stack0xffffffffffffffd8 + -8) = 0x40130a;
        iVar3 = sym.imp.strcmp(puVar4,"the  ");
        if (iVar3 == 0) {
            *(ppuStack_10 + 2) = 1;
            puVar5 = &stack0xffffffffffffffd8;
        }
        else {
            puVar4 = ppuStack_10[1];
            *(&stack0xffffffffffffffd8 + -8) = 0x401330;
            iVar3 = sym.imp.strcmp(puVar4,"dark");
            if (iVar3 == 0) {
                *(ppuStack_10 + 2) = 2;
                puVar5 = &stack0xffffffffffffffd8;
            }
            else {
                puVar4 = ppuStack_10[1];
                *(&stack0xffffffffffffffd8 + -8) = 0x401356;
                iVar3 = sym.imp.strcmp(puVar4,"third");
                puVar5 = &stack0xffffffffffffffd8;
                if (iVar3 == 0) {
                    *(ppuStack_10 + 2) = 3;
                    puVar5 = &stack0xffffffffffffffd8;
                }
                else {
                    *(ppuStack_10 + 2) = 1000000;
                }
            }
        }
    }
    uVar1 = *(ppuStack_10 + 2);
    if (3 < uVar1 && uVar1 != 4) {
        if (uVar1 == 1000000) {
            *(puVar5 + -8) = 0x4013fc;
            sym.imp.printf("million");
            puVar5 = puVar5;
        }
    }
    else if (uVar1 < 5) {
    //WARNING: Could not recover jumptable at 0x0040138d. Too many branches
    //WARNING: Treating indirect jump as call
        (**(uVar1 * 8 + 0x402088))();
        return;
    }
    uVar2 = *(ppuStack_10 + 2);
    *(puVar5 + -8) = 0x40140d;
    sym.PrintAmbassador(uVar2);
    return;
}

EOF
CMDS=<<EOF
aaa

# TODO: remove these when r2 can do it automatically
afvr rdi format const char * @ sym.imp.printf
afvr rdi size size_t @ sym.imp.malloc
afvr rdi s1 const char * @ sym.imp.strcmp
afvr rsi s2 const char * @ sym.imp.strcmp

to bins/types.h
# TODO: remove when parsed struct from r2 is correct
k analysis/types/struct.Bright.ambassador=enum Ambassador,16,0
k analysis/types/struct.Bright.window=struct Window,8,0

s sym.Aeropause
afvr rdi bright Bright *
afvr rsi argc int32_t
afvr rdx argv const char **
pdg
EOF
RUN

NAME=typedef
FILE=bins/dectest32
EXPECT=<<EOF

void sym.Aeropause(uint32_t **param_1,uint32_t param_2,uint32_t param_3)

{
    uint32_t *puVar1;
    int iVar2;
    uchar *puVar3;
    uint32_t *apuStack_20 [5];
    uchar auStack_c [8];
    
    *(*0x10 + -0x1c) = 8;
    *(*0x10 + -0x20) = 0x80492ee;
    puVar1 = sym.imp.malloc();
    *param_1 = puVar1;
    **param_1 = param_2;
    (*param_1)[1] = param_3;
    if (**param_1 < 2) {
        param_1[2] = NULL;
        puVar3 = &stack0xfffffff4;
    }
    else {
        param_1[1] = *((*param_1)[1] + 4);
        puVar1 = param_1[1];
        *(&stack0xfffffff4 + -0xc) = 0x804a05c;
        *(&stack0xfffffff4 + -0x10) = puVar1;
        *(&stack0xfffffff4 + -0x14) = 0x804934d;
        iVar2 = sym.imp.strcmp();
        if (iVar2 == 0) {
            param_1[2] = 0x1;
            puVar3 = &stack0xfffffff4 + 0;
        }
        else {
            puVar1 = param_1[1];
            *(*0x10 + -0x18) = "dark";
            *(*0x10 + -0x1c) = puVar1;
            *(*0x10 + -0x20) = 0x8049374;
            iVar2 = sym.imp.strcmp();
            if (iVar2 == 0) {
                param_1[2] = 0x2;
                puVar3 = *0x10 + -0xc;
            }
            else {
                apuStack_20[1] = param_1[1];
                apuStack_20[2] = 0x804a067;
                apuStack_20[0] = 0x804939b;
                iVar2 = sym.imp.strcmp();
                puVar3 = &stack0xfffffff4;
                if (iVar2 == 0) {
                    param_1[2] = 0x3;
                    puVar3 = &stack0xfffffff4;
                }
                else {
                    param_1[2] = 0xf4240;
                }
            }
        }
    }
    puVar1 = param_1[2];
    if (puVar1 < 0x5) {
        switch(puVar1) {
        case NULL:
            *(puVar3 + -0x10) = "pure";
            *(puVar3 + -0x14) = 0x80493e7;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x1:
            *(puVar3 + -0x10) = "reason";
            *(puVar3 + -0x14) = 0x80493f9;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x2:
            *(puVar3 + -0x10) = "revolution";
            *(puVar3 + -0x14) = 0x804940b;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x3:
            *(puVar3 + -0x10) = "echoes";
            *(puVar3 + -0x14) = 0x804941d;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x4:
            *(puVar3 + -0x10) = "wall";
            *(puVar3 + -0x14) = 0x804942f;
            sym.imp.printf();
            puVar3 = puVar3;
        }
    }
    else if (puVar1 == 0xf4240) {
        *(puVar3 + -0x10) = "million";
        *(puVar3 + -0x14) = 0x8049441;
        sym.imp.printf();
        puVar3 = puVar3;
    }
    *(puVar3 + -0x10) = param_1[2];
    *(puVar3 + -0x14) = 0x8049456;
    sym.PrintAmbassador();
    return;
}

--

void sym.Aeropause(uint32_t **param_1,uint32_t param_2,uint32_t param_3)

{
    uint32_t *puVar1;
    int iVar2;
    uchar *puVar3;
    uint32_t *apuStack_20 [5];
    uchar auStack_c [8];
    
    *(*0x10 + -0x1c) = 8;
    *(*0x10 + -0x20) = 0x80492ee;
    puVar1 = sym.imp.malloc();
    *param_1 = puVar1;
    **param_1 = param_2;
    (*param_1)[1] = param_3;
    if (**param_1 < 2) {
        param_1[2] = NULL;
        puVar3 = &stack0xfffffff4;
    }
    else {
        param_1[1] = *((*param_1)[1] + 4);
        puVar1 = param_1[1];
        *(&stack0xfffffff4 + -0xc) = 0x804a05c;
        *(&stack0xfffffff4 + -0x10) = puVar1;
        *(&stack0xfffffff4 + -0x14) = 0x804934d;
        iVar2 = sym.imp.strcmp();
        if (iVar2 == 0) {
            param_1[2] = 0x1;
            puVar3 = &stack0xfffffff4 + 0;
        }
        else {
            puVar1 = param_1[1];
            *(*0x10 + -0x18) = "dark";
            *(*0x10 + -0x1c) = puVar1;
            *(*0x10 + -0x20) = 0x8049374;
            iVar2 = sym.imp.strcmp();
            if (iVar2 == 0) {
                param_1[2] = 0x2;
                puVar3 = *0x10 + -0xc;
            }
            else {
                apuStack_20[1] = param_1[1];
                apuStack_20[2] = 0x804a067;
                apuStack_20[0] = 0x804939b;
                iVar2 = sym.imp.strcmp();
                puVar3 = &stack0xfffffff4;
                if (iVar2 == 0) {
                    param_1[2] = 0x3;
                    puVar3 = &stack0xfffffff4;
                }
                else {
                    param_1[2] = 0xf4240;
                }
            }
        }
    }
    puVar1 = param_1[2];
    if (puVar1 < 0x5) {
        switch(puVar1) {
        case NULL:
            *(puVar3 + -0x10) = "pure";
            *(puVar3 + -0x14) = 0x80493e7;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x1:
            *(puVar3 + -0x10) = "reason";
            *(puVar3 + -0x14) = 0x80493f9;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x2:
            *(puVar3 + -0x10) = "revolution";
            *(puVar3 + -0x14) = 0x804940b;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x3:
            *(puVar3 + -0x10) = "echoes";
            *(puVar3 + -0x14) = 0x804941d;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x4:
            *(puVar3 + -0x10) = "wall";
            *(puVar3 + -0x14) = 0x804942f;
            sym.imp.printf();
            puVar3 = puVar3;
        }
    }
    else if (puVar1 == 0xf4240) {
        *(puVar3 + -0x10) = "million";
        *(puVar3 + -0x14) = 0x8049441;
        sym.imp.printf();
        puVar3 = puVar3;
    }
    *(puVar3 + -0x10) = param_1[2];
    *(puVar3 + -0x14) = 0x8049456;
    sym.PrintAmbassador();
    return;
}

--

void sym.Aeropause(uint32_t **param_1,uint32_t param_2,uint32_t param_3)

{
    uint32_t *puVar1;
    int iVar2;
    uchar *puVar3;
    uint32_t *apuStack_20 [5];
    uchar auStack_c [8];
    
    *(*0x10 + -0x1c) = 8;
    *(*0x10 + -0x20) = 0x80492ee;
    puVar1 = sym.imp.malloc();
    *param_1 = puVar1;
    **param_1 = param_2;
    (*param_1)[1] = param_3;
    if (**param_1 < 2) {
        param_1[2] = NULL;
        puVar3 = &stack0xfffffff4;
    }
    else {
        param_1[1] = *((*param_1)[1] + 4);
        puVar1 = param_1[1];
        *(&stack0xfffffff4 + -0xc) = 0x804a05c;
        *(&stack0xfffffff4 + -0x10) = puVar1;
        *(&stack0xfffffff4 + -0x14) = 0x804934d;
        iVar2 = sym.imp.strcmp();
        if (iVar2 == 0) {
            param_1[2] = 0x1;
            puVar3 = &stack0xfffffff4 + 0;
        }
        else {
            puVar1 = param_1[1];
            *(*0x10 + -0x18) = "dark";
            *(*0x10 + -0x1c) = puVar1;
            *(*0x10 + -0x20) = 0x8049374;
            iVar2 = sym.imp.strcmp();
            if (iVar2 == 0) {
                param_1[2] = 0x2;
                puVar3 = *0x10 + -0xc;
            }
            else {
                apuStack_20[1] = param_1[1];
                apuStack_20[2] = 0x804a067;
                apuStack_20[0] = 0x804939b;
                iVar2 = sym.imp.strcmp();
                puVar3 = &stack0xfffffff4;
                if (iVar2 == 0) {
                    param_1[2] = 0x3;
                    puVar3 = &stack0xfffffff4;
                }
                else {
                    param_1[2] = 0xf4240;
                }
            }
        }
    }
    puVar1 = param_1[2];
    if (puVar1 < 0x5) {
        switch(puVar1) {
        case NULL:
            *(puVar3 + -0x10) = "pure";
            *(puVar3 + -0x14) = 0x80493e7;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x1:
            *(puVar3 + -0x10) = "reason";
            *(puVar3 + -0x14) = 0x80493f9;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x2:
            *(puVar3 + -0x10) = "revolution";
            *(puVar3 + -0x14) = 0x804940b;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x3:
            *(puVar3 + -0x10) = "echoes";
            *(puVar3 + -0x14) = 0x804941d;
            sym.imp.printf();
            puVar3 = puVar3;
            break;
        case 0x4:
            *(puVar3 + -0x10) = "wall";
            *(puVar3 + -0x14) = 0x804942f;
            sym.imp.printf();
            puVar3 = puVar3;
        }
    }
    else if (puVar1 == 0xf4240) {
        *(puVar3 + -0x10) = "million";
        *(puVar3 + -0x14) = 0x8049441;
        sym.imp.printf();
        puVar3 = puVar3;
    }
    *(puVar3 + -0x10) = param_1[2];
    *(puVar3 + -0x14) = 0x8049456;
    sym.PrintAmbassador();
    return;
}

EOF
CMDS=<<EOF
aaa
to bins/types.h
s sym.Aeropause
afvb 8 bright BrightPtr
afvb 12 argc Bright *
afvb 16 argv const char **
pdg
?e --
afvb 8 bright BrightTypedefd *
afvb 12 argc int32_t
afvb 16 argv const char **
pdg
?e --
afvb 8 bright BrightTypedefdPtr
pdg
EOF
RUN

NAME=macos args
FILE=bins/mach0/arg
EXPECT=<<EOF

void main(void)

{
    ulong auStack_20 [2];
    uint uStack_c;
    
    uStack_c = 0;
    *(*0x20 + -0x18 + -8) = 0x100000f72;
    sym._call();
    return;
}

EOF
CMDS=<<EOF
aaa
s main
pdg
EOF
RUN

NAME=Nodup function on container query
FILE=bins/hello-arm
EXPECT=<<EOF

//WARNING: Control flow encountered bad instruction data

void entry0(void)

{
    uint unaff_r11;
    uint in_lr;
    uint *puVar1;
    uint auStack_14 [2];
    uint auStack_c [3];
    uchar *puVar2;
    
    *(*0x54 + -4) = in_lr;
    puVar1 = *0x54 + -4 + -4;
    *puVar1 = unaff_r11;
    puVar2 = puVar1 + -4;
    *(puVar2 + -4) = *(*0x418 + 0x3f0);
    *(puVar2 + -8) = *(*0x41c + 0x3fc);
    *puVar2 = *(*0x420 + 0x408);
    func_0x0000039c();
    //WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}

EOF
CMDS=<<EOF
s entry0
af
pdg
EOF
RUN

NAME=code printing
FILE=bins/elf/crackme0x05
EXPECT=<<EOF

uint main(void)

{
    uint32_t uVar1;
    uchar auStack_8c [16];
    uchar auStack_7c [120];
    
    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    *(uVar1 - 0x14) = 0x804856b;
    sym.imp.printf();
    *(uVar1 - 0x10) = "Password: ";
    *(uVar1 - 0x14) = 0x8048577;
    sym.imp.printf();
    *(uVar1 - 0xc) = &stack0xffffff84;
    *(uVar1 - 0x10) = 0x80486b2;
    *(uVar1 - 0x14) = 0x804858a;
    sym.imp.scanf();
    *(uVar1 - 0x10) = &stack0xffffff84;
    *((uVar1 - 0x10) + -4) = 0x8048595;
    sym.check();
    return 0;
}

--
                  |
    0x08048540    |uint main(void)
                  |
                  |{
                  |    uint32_t uVar1;
                  |    uchar auStack_8c [16];
                  |    uchar auStack_7c [120];
                  |    
    0x08048549    |    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    0x0804855f    |    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    0x08048566    |    *(uVar1 - 0x14) = 0x804856b;
    0x08048566    |    sym.imp.printf();
    0x0804856b    |    *(uVar1 - 0x10) = "Password: ";
    0x08048572    |    *(uVar1 - 0x14) = 0x8048577;
    0x08048572    |    sym.imp.printf();
    0x0804857a    |    *(uVar1 - 0xc) = &stack0xffffff84;
    0x0804857e    |    *(uVar1 - 0x10) = 0x80486b2;
    0x08048585    |    *(uVar1 - 0x14) = 0x804858a;
    0x08048585    |    sym.imp.scanf();
    0x0804858d    |    *(uVar1 - 0x10) = &stack0xffffff84;
    0x08048590    |    *((uVar1 - 0x10) + -4) = 0x8048595;
    0x08048590    |    sym.check();
    0x0804859b    |    return 0;
                  |}
                  |
--
CCu base64:LQ== @ 0x804855d
CCu base64:KigodVZhcjEgLSAweDEwKSArIC00KSA9IDB4ODA0ODU5NQ== @ 0x8048590
CCu base64:Kih1VmFyMSAtIDB4MTApID0gIklPTEkgQ3JhY2ttZSBMZXZlbCAweDA1XG4i @ 0x804855f
CCu base64:Kih1VmFyMSAtIDB4MTQpID0gMHg4MDQ4NTc3 @ 0x8048572
CCu base64:bWFpbg== @ 0x8048540
CCu base64:Kih1VmFyMSAtIDB4MTQpID0gMHg4MDQ4NThh @ 0x8048585
CCu base64:Kw== @ 0x8048543
CCu base64:Jg== @ 0x8048577
CCu base64:Kih1VmFyMSAtIDB4MTQpID0gMHg4MDQ4NTZi @ 0x8048566
CCu base64:Jg== @ 0x804858a
CCu base64:cmV0dXJuIDA= @ 0x804859b
CCu base64:Kih1VmFyMSAtIDB4YykgPSAmc3RhY2sweGZmZmZmZjg0 @ 0x804857a
CCu base64:dVZhcjEgPSAqMHgxMCArIC0weDhjICYgMHhmZmZmZmZmMA== @ 0x8048549
CCu base64:Kih1VmFyMSAtIDB4MTApID0gIlBhc3N3b3JkOiAi @ 0x804856b
CCu base64:Kih1VmFyMSAtIDB4MTApID0gJnN0YWNrMHhmZmZmZmY4NA== @ 0x804858d
CCu base64:Kih1VmFyMSAtIDB4MTApID0gMHg4MDQ4NmIy @ 0x804857e
--
<result><function>
<function name="main" size="92">
  <localdb main="stack" lock="false">
      <rangelist>
        <range space="stack" first="0x4" last="0x1f7"/>
        <range space="stack" first="0xfff0bdc0" last="0xfffffffb"/>
      </rangelist>
      <symbollist>
        <mapsym>
            <type name="" size="120" metatype="array" arraysize="120">
            </type>
          </symbol>
          <rangelist/>
        </mapsym>
        <mapsym>
            <type name="" size="16" metatype="array" arraysize="16">
            </type>
          </symbol>
          <rangelist/>
        </mapsym>
        <mapsym>
          </symbol>
          <rangelist>
            <range space="ram" first="0x8048549" last="0x8048549"/>
          </rangelist>
        </mapsym>
      </symbollist>
    </scope>
  </localdb>
  <ast>
    <varnodes>
    </varnodes>
    <block index="0">
      <rangelist>
        <range space="ram" first="0x8048540" last="0x804859b"/>
      </rangelist>
      <op code="1">
        <seqnum space="ram" offset="0x8048543" uniq="0xf9"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048543" uniq="0xff"/>
      </op>
      <op code="19">
        <seqnum space="ram" offset="0x8048543" uniq="0x6"/>
      </op>
      <op code="27">
        <seqnum space="ram" offset="0x8048549" uniq="0xf"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x804855d" uniq="0xd6"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804855d" uniq="0x100"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x804855d" uniq="0xef"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804855d" uniq="0x101"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x804855d" uniq="0xf5"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804855d" uniq="0x102"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x804855d" uniq="0xf6"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804855d" uniq="0x103"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x804855f" uniq="0xf7"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x804855f" uniq="0x7d"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x8048566" uniq="0xd8"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048566" uniq="0x104"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x8048566" uniq="0x7f"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048566" uniq="0x80"/>
        <void/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048566" uniq="0xda"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x804856b" uniq="0xf8"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x804856b" uniq="0x82"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x8048572" uniq="0xdc"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048572" uniq="0x105"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048572" uniq="0xf3"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048572" uniq="0xf4"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x8048572" uniq="0xeb"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048572" uniq="0x106"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x8048572" uniq="0x84"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048572" uniq="0x85"/>
        <void/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x8048572" uniq="0xdf"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048572" uniq="0x107"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048572" uniq="0xec"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048572" uniq="0xed"/>
      </op>
      <op code="66">
        <seqnum space="ram" offset="0x8048577" uniq="0xfd"/>
      </op>
      <op code="20">
        <seqnum space="ram" offset="0x804857a" uniq="0x88"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804857a" uniq="0x108"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x804857a" uniq="0x8a"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x804857e" uniq="0x8c"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048585" uniq="0xe1"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x8048585" uniq="0x8e"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048585" uniq="0x8f"/>
        <void/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048585" uniq="0x109"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048585" uniq="0xe3"/>
      </op>
      <op code="66">
        <seqnum space="ram" offset="0x804858a" uniq="0xfe"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x804858d" uniq="0x10a"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x804858d" uniq="0x93"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048590" uniq="0xd1"/>
      </op>
      <op code="65">
        <seqnum space="ram" offset="0x8048590" uniq="0x94"/>
      </op>
      <op code="64">
        <seqnum space="ram" offset="0x8048590" uniq="0x10b"/>
      </op>
      <op code="3">
        <seqnum space="ram" offset="0x8048590" uniq="0x95"/>
        <void/>
        <spaceid name="ram"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048590" uniq="0x96"/>
        <void/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048595" uniq="0x97"/>
      </op>
      <op code="10">
        <seqnum space="ram" offset="0x804859b" uniq="0x9d"/>
        <void/>
      </op>
    </block>
  </ast>
  <highlist>
    <high repref="0x1a3" class="constant">
    </high>
    <high repref="0x1c1" class="constant">
    </high>
    <high repref="0x2d2" class="constant">
    </high>
    <high repref="0x2f2" class="constant">
    </high>
    <high repref="0x2e8" class="constant">
    </high>
    <high repref="0x2e9" class="constant">
    </high>
    <high repref="0x2ea" class="constant">
    </high>
    <high repref="0x2eb" class="constant">
    </high>
    <high repref="0x2f0" class="constant">
    </high>
    <high repref="0x2ed" class="constant">
    </high>
    <high repref="0x2ef" class="constant">
    </high>
    <high repref="0x2f1" class="constant">
    </high>
    <high repref="0x166" class="constant">
    </high>
    <high repref="0x173" class="constant">
    </high>
    <high repref="0x18d" class="constant">
    </high>
    <high repref="0x19f" class="constant">
    </high>
    <high repref="0x2ec" class="constant">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2ee" class="constant">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x251" class="constant">
    </high>
    <high repref="0x2d9" class="constant">
    </high>
    <high repref="0x2cd" class="constant">
    </high>
    <high repref="0x2d0" class="constant">
    </high>
    <high repref="0x2a" class="constant">
    </high>
    <high repref="0x257" class="constant">
    </high>
    <high repref="0x15e" class="constant">
    </high>
    <high repref="0x164" class="constant">
    </high>
    <high repref="0x16b" class="constant">
    </high>
    <high repref="0x171" class="constant">
    </high>
    <high repref="0x180" class="constant">
    </high>
    <high repref="0x185" class="constant">
    </high>
    <high repref="0x18b" class="constant">
    </high>
    <high repref="0x197" class="constant">
    </high>
    <high repref="0x19d" class="constant">
    </high>
    <high repref="0x176" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x190" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x17b" class="other">
      <type name="" size="4" metatype="ptr" core="true">
        <type name="" size="4" metatype="ptr" core="true">
        </type>
      </type>
    </high>
    <high repref="0x255" class="other">
    </high>
    <high repref="0x2ba" class="other" typelock="true">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2bd" class="other" typelock="true">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2bf" class="other">
    </high>
    <high repref="0x2f3" class="other">
    </high>
    <high repref="0x2f4" class="other">
    </high>
    <high repref="0x2f5" class="other">
    </high>
    <high repref="0x2f6" class="other">
    </high>
    <high repref="0x2f7" class="other">
    </high>
    <high repref="0x2f8" class="other">
    </high>
    <high repref="0x2f9" class="other">
    </high>
    <high repref="0x2fa" class="other">
    </high>
    <high repref="0x2fb" class="other">
    </high>
    <high repref="0x2fc" class="other">
    </high>
    <high repref="0x2fd" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2fe" class="other">
    </high>
    <high repref="0x2ff" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x1a2" class="other">
    </high>
    <high repref="0x238" class="other" typelock="true">
      <type name="" size="4" metatype="ptr">
        <type name="" size="0" metatype="spacebase" space="stack">
        </type>
      </type>
    </high>
    <high repref="0x10" class="other">
    </high>
    <high repref="0x28" class="other" symref="0x4000010000000018">
    </high>
    <high repref="0x25d" class="other">
      <type name="" size="4" metatype="ptr" core="true">
        <type name="" size="4" metatype="ptr" core="true">
        </type>
      </type>
    </high>
    <high repref="0x2a3" class="other">
      <type name="" size="4" metatype="ptr" core="true">
        <type name="" size="4" metatype="ptr" core="true">
        </type>
      </type>
    </high>
    <high repref="0x2b5" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2b7" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x261" class="other">
      <type name="" size="4" metatype="ptr" core="true">
        <type name="" size="4" metatype="ptr" core="true">
        </type>
      </type>
    </high>
    <high repref="0x25f" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x29d" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x29f" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2ab" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2ac" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x265" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x29c" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x268" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x26c" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x26e" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x19a" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
  </highlist>
  <prototype model="__cdecl" extrapop="4">
    <returnsym>
    </returnsym>
  </prototype>
</function></function><code>
<function>
  <syntax></syntax>
  <break indent="0"/>
  <funcproto>
    <return_type varref="0x1a2">
      <syntax></syntax>
      <syntax></syntax>
    </return_type>
    <syntax> </syntax>
    <funcname color="0x3">main</funcname>
    <syntax></syntax>
    <syntax open="230">(</syntax>
    <syntax></syntax>
    <syntax color="0x0">void</syntax>
    <syntax></syntax>
    <syntax close="230">)</syntax>
  </funcproto>
  <break indent="0"/>
  <syntax></syntax>
  <break indent="0"/>
  <syntax>{</syntax>
  <break indent="4"/>
  <vardecl symref="0x4000010000000018">
    <syntax> </syntax>
    <variable color="0x4">uVar1</variable>
  </vardecl>
  <syntax></syntax>
  <syntax>;</syntax>
  <break indent="4"/>
  <vardecl symref="0x4000010000000016">
    <syntax> </syntax>
    <variable color="0x4">auStack_8c</variable>
    <syntax> </syntax>
    <syntax open="237">[</syntax>
    <syntax></syntax>
    <syntax color="0x5">16</syntax>
    <syntax></syntax>
    <syntax close="237">]</syntax>
  </vardecl>
  <syntax></syntax>
  <syntax>;</syntax>
  <break indent="4"/>
  <vardecl symref="0x4000010000000017">
    <syntax> </syntax>
    <variable color="0x4">auStack_7c</variable>
    <syntax> </syntax>
    <syntax open="241">[</syntax>
    <syntax></syntax>
    <syntax color="0x5">120</syntax>
    <syntax></syntax>
    <syntax close="241">]</syntax>
  </vardecl>
  <syntax></syntax>
  <syntax>;</syntax>
  <break indent="4"/>
  <block blockref="0">
    <syntax></syntax>
    <break indent="4"/>
    <statement opref="0xf">
      <variable color="0x4" varref="0x28" opref="0xf">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xf">=</op>
      <syntax> </syntax>
      <op opref="0xff">*</op>
      <syntax></syntax>
      <variable color="0x5" varref="0x238" opref="0xff">0x10</variable>
      <syntax> </syntax>
      <op opref="0x6">+</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2d9" opref="0xf9">-0x8c</variable>
      <syntax> </syntax>
      <op opref="0xf">&amp;</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2a" opref="0xf">0xfffffff0</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x7d">
      <op opref="0x7d">*</op>
      <syntax></syntax>
      <syntax open="251">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xd6">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xd6">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2e8" opref="0xd6">0x10</variable>
      <syntax></syntax>
      <syntax close="251">)</syntax>
      <syntax> </syntax>
      <op opref="0x7d">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2ec" opref="0xf7">&quot;IOLI Crackme Level 0x05\n&quot;</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x7f">
      <op opref="0x7f">*</op>
      <syntax></syntax>
      <syntax open="255">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xd8">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xd8">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2ed" opref="0xd8">0x14</variable>
      <syntax></syntax>
      <syntax close="255">)</syntax>
      <syntax> </syntax>
      <op opref="0x7f">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x166" opref="0x7f">0x804856b</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x80">
      <funcname color="0x3" opref="0x80">sym.imp.printf</funcname>
      <syntax></syntax>
      <syntax open="258">(</syntax>
      <syntax></syntax>
      <syntax close="258">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x82">
      <op opref="0x82">*</op>
      <syntax></syntax>
      <syntax open="262">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xef">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xef">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2e9" opref="0xef">0x10</variable>
      <syntax></syntax>
      <syntax close="262">)</syntax>
      <syntax> </syntax>
      <op opref="0x82">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2ee" opref="0xf8">&quot;Password: &quot;</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x84">
      <op opref="0x84">*</op>
      <syntax></syntax>
      <syntax open="266">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xdc">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xdc">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2ef" opref="0xdc">0x14</variable>
      <syntax></syntax>
      <syntax close="266">)</syntax>
      <syntax> </syntax>
      <op opref="0x84">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x173" opref="0x84">0x8048577</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x85">
      <funcname color="0x3" opref="0x85">sym.imp.printf</funcname>
      <syntax></syntax>
      <syntax open="269">(</syntax>
      <syntax></syntax>
      <syntax close="269">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x8a">
      <op opref="0x8a">*</op>
      <syntax></syntax>
      <syntax open="273">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0x88">uVar1</variable>
      <syntax> </syntax>
      <op opref="0x88">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2f2" opref="0x88">0xc</variable>
      <syntax></syntax>
      <syntax close="273">)</syntax>
      <syntax> </syntax>
      <op opref="0x8a">=</op>
      <syntax> </syntax>
      <op opref="0xfd">&amp;</op>
      <syntax></syntax>
      <variable color="0x4" opref="0xfd">stack0xffffff84</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x8c">
      <op opref="0x8c">*</op>
      <syntax></syntax>
      <syntax open="278">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xdf">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xdf">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2f0" opref="0xdf">0x10</variable>
      <syntax></syntax>
      <syntax close="278">)</syntax>
      <syntax> </syntax>
      <op opref="0x8c">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x251" opref="0x8c">0x80486b2</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x8e">
      <op opref="0x8e">*</op>
      <syntax></syntax>
      <syntax open="282">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xeb">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xeb">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2f1" opref="0xeb">0x14</variable>
      <syntax></syntax>
      <syntax close="282">)</syntax>
      <syntax> </syntax>
      <op opref="0x8e">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x18d" opref="0x8e">0x804858a</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x8f">
      <funcname color="0x3" opref="0x8f">sym.imp.scanf</funcname>
      <syntax></syntax>
      <syntax open="285">(</syntax>
      <syntax></syntax>
      <syntax close="285">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x93">
      <op opref="0x93">*</op>
      <syntax></syntax>
      <syntax open="289">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xf5">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xf5">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2ea" opref="0xf5">0x10</variable>
      <syntax></syntax>
      <syntax close="289">)</syntax>
      <syntax> </syntax>
      <op opref="0x93">=</op>
      <syntax> </syntax>
      <op opref="0xfe">&amp;</op>
      <syntax></syntax>
      <variable color="0x4" opref="0xfe">stack0xffffff84</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x95">
      <op opref="0x95">*</op>
      <syntax></syntax>
      <syntax open="294">(</syntax>
      <syntax></syntax>
      <syntax open="295">(</syntax>
      <syntax></syntax>
      <variable color="0x4" varref="0x28" opref="0xf6">uVar1</variable>
      <syntax> </syntax>
      <op opref="0xf6">-</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x2eb" opref="0xf6">0x10</variable>
      <syntax></syntax>
      <syntax close="295">)</syntax>
      <syntax> </syntax>
      <op opref="0x94">+</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x257" opref="0xd1">-4</variable>
      <syntax></syntax>
      <syntax close="294">)</syntax>
      <syntax> </syntax>
      <op opref="0x95">=</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x19f" opref="0x95">0x8048595</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x96">
      <funcname color="0x3" opref="0x96">sym.check</funcname>
      <syntax></syntax>
      <syntax open="298">(</syntax>
      <syntax></syntax>
      <syntax close="298">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x9d">
      <op color="0x0" opref="0x9d">return</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x1a3" opref="0x97">0</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
  </block>
  <break indent="0"/>
  <syntax>}</syntax>
  <break indent="0"/>
  <syntax></syntax>
</function></code></result>
--
<save_state loadersymbols="false">
  <typegrp intsize="4" longsize="4" enumsize="4" enumsigned="false"/>
  <db>
    <property_changepoint space="register" offset="0x1100" val="0x20000000"/>
    <property_changepoint space="register" offset="0x110a" val="0x0"/>
    <property_changepoint space="register" offset="0x1110" val="0x20000000"/>
    <property_changepoint space="register" offset="0x111a" val="0x0"/>
    <property_changepoint space="register" offset="0x1120" val="0x20000000"/>
    <property_changepoint space="register" offset="0x112a" val="0x0"/>
    <property_changepoint space="register" offset="0x1130" val="0x20000000"/>
    <property_changepoint space="register" offset="0x113a" val="0x0"/>
    <property_changepoint space="register" offset="0x1140" val="0x20000000"/>
    <property_changepoint space="register" offset="0x114a" val="0x0"/>
    <property_changepoint space="register" offset="0x1150" val="0x20000000"/>
    <property_changepoint space="register" offset="0x115a" val="0x0"/>
    <property_changepoint space="register" offset="0x1160" val="0x20000000"/>
    <property_changepoint space="register" offset="0x116a" val="0x0"/>
    <property_changepoint space="register" offset="0x1170" val="0x20000000"/>
    <property_changepoint space="register" offset="0x117a" val="0x0"/>
      <rangelist/>
      <symbollist>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xfffffffb"/>
                </rangelist>
                <symbollist>
                  <mapsym>
                      <type name="" size="120" metatype="array" arraysize="120">
                      </type>
                    </symbol>
                    <addr space="stack" offset="0xffffff84"/>
                    <rangelist/>
                  </mapsym>
                  <mapsym>
                      <type name="" size="16" metatype="array" arraysize="16">
                      </type>
                    </symbol>
                    <addr space="stack" offset="0xffffff74"/>
                    <rangelist/>
                  </mapsym>
                  <mapsym>
                    </symbol>
                    <addr space="register" offset="0x10"/>
                    <rangelist>
                      <range space="ram" first="0x8048549" last="0x8048549"/>
                    </rangelist>
                  </mapsym>
                </symbollist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="register" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <type name="" size="25" metatype="array" arraysize="25">
            </type>
          </symbol>
          <addr space="ram" offset="0x804868e"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <type name="" size="11" metatype="array" arraysize="11">
            </type>
          </symbol>
          <addr space="ram" offset="0x80486a7"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x80484c8"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x80484c8"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048394"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048394"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048374"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048374"/>
          <rangelist/>
        </mapsym>
      </symbollist>
    </scope>
  </db>
  <context_points>
    <context_pointset space="ram" offset="0x0">
      <set name="addrsize" val="0x1"/>
      <set name="bit64" val="0x0"/>
      <set name="highseg" val="0x0"/>
      <set name="instrPhase" val="0x0"/>
      <set name="lockprefx" val="0x0"/>
      <set name="mandover" val="0x0"/>
      <set name="opsize" val="0x1"/>
      <set name="prefix_66" val="0x0"/>
      <set name="prefix_f2" val="0x0"/>
      <set name="prefix_f3" val="0x0"/>
      <set name="repneprefx" val="0x0"/>
      <set name="repprefx" val="0x0"/>
      <set name="reserved" val="0x0"/>
      <set name="rexBprefix" val="0x0"/>
      <set name="rexRprefix" val="0x0"/>
      <set name="rexWRXBprefix" val="0x0"/>
      <set name="rexWprefix" val="0x0"/>
      <set name="rexXprefix" val="0x0"/>
      <set name="rexprefix" val="0x0"/>
      <set name="segover" val="0x0"/>
      <set name="suffix3D" val="0x0"/>
      <set name="vexL" val="0x0"/>
      <set name="vexMMMMM" val="0x0"/>
      <set name="vexMode" val="0x0"/>
      <set name="vexVVVV" val="0x0"/>
      <set name="vexVVVV_r64" val="0x0"/>
      <set name="xacquireprefx" val="0x0"/>
      <set name="xreleaseprefx" val="0x0"/>
    </context_pointset>
    <context_pointset space="register" offset="0x0">
      <set name="addrsize" val="0x0"/>
      <set name="bit64" val="0x0"/>
      <set name="highseg" val="0x0"/>
      <set name="instrPhase" val="0x0"/>
      <set name="lockprefx" val="0x0"/>
      <set name="mandover" val="0x0"/>
      <set name="opsize" val="0x0"/>
      <set name="prefix_66" val="0x0"/>
      <set name="prefix_f2" val="0x0"/>
      <set name="prefix_f3" val="0x0"/>
      <set name="repneprefx" val="0x0"/>
      <set name="repprefx" val="0x0"/>
      <set name="reserved" val="0x0"/>
      <set name="rexBprefix" val="0x0"/>
      <set name="rexRprefix" val="0x0"/>
      <set name="rexWRXBprefix" val="0x0"/>
      <set name="rexWprefix" val="0x0"/>
      <set name="rexXprefix" val="0x0"/>
      <set name="rexprefix" val="0x0"/>
      <set name="segover" val="0x0"/>
      <set name="suffix3D" val="0x0"/>
      <set name="vexL" val="0x0"/>
      <set name="vexMMMMM" val="0x0"/>
      <set name="vexMode" val="0x0"/>
      <set name="vexVVVV" val="0x0"/>
      <set name="vexVVVV_r64" val="0x0"/>
      <set name="xacquireprefx" val="0x0"/>
      <set name="xreleaseprefx" val="0x0"/>
    </context_pointset>
    <tracked_pointset space="ram" offset="0x0">
      <set space="register" offset="0x20a" size="1" val="0x0"/>
    </tracked_pointset>
  </context_points>
  <commentdb/>
  <stringmanage>
    <string>
      <addr space="ram" offset="0x804868e"/>
      <bytes trunc="false">
494f4c4920437261636b6d65204c6576656c2030
  7830350a0050617373776f72
</bytes>
      <string>
        <addr space="ram" offset="0x80486a7"/>
        <bytes trunc="false">
50617373776f72643a2000257300000000000000
  00ffffffffffffffffffffff
</bytes>
      </stringmanage>
    </save_state>
--
EOF
CMDS=<<EOF
s main
af
e scr.color=0
pdg
?e --
pdgo
?e --
pdg*
?e --
pdgx~!id=,<addr
?e --
pdgd~!id=,protectedMode
?e --
# XXX: uncomment to test colors
# e scr.color=3
# pdg
# ?e --
# pdgo
EOF
RUN

NAME=pdgo align
FILE=bins/elf/hello_world
ARGS=-B 0x1000000000000000
EXPECT=<<EOF
                          |
    0x10000000000007aa    |void main(void)
                          |
                          |{
                          |    int iVar1;
                          |    int iVar2;
                          |    char *pcVar3;
                          |    int64_t iVar4;
                          |    uchar *puVar5;
                          |    uchar *puVar6;
                          |    uchar *puVar7;
                          |    uchar *puVar8;
                          |    ulong uStack_30;
                          |    int iStack_28;
                          |    int iStack_24;
                          |    char *pcStack_20;
                          |    char *pcStack_18;
                          |    int64_t iStack_10;
                          |    
    0x10000000000007b9    |    pcStack_20 = "Hello";
    0x10000000000007c4    |    pcStack_18 = " r2-folks";
    0x10000000000007cf    |    *(*0x20 + -0x30) = 0x10000000000007d4;
    0x10000000000007cf    |    iStack_28 = sym.imp.strlen("Hello");
    0x10000000000007d7    |    pcVar3 = pcStack_18;
    0x10000000000007de    |    puVar5 = *0x20 + -0x28;
    0x10000000000007de    |    *(*0x20 + -0x28 + -8) = 0x10000000000007e3;
    0x10000000000007de    |    iStack_24 = sym.imp.strlen(pcVar3);
    0x10000000000007e6    |    iVar1 = iStack_28;
    0x10000000000007e9    |    iVar2 = iStack_24;
    0x10000000000007f6    |    puVar6 = puVar5;
    0x10000000000007f6    |    *(puVar5 + -8) = 0x10000000000007fb;
    0x10000000000007f6    |    iStack_10 = sym.imp.malloc(iVar2 + iVar1 + 1);
    0x1000000000000804    |    if (iStack_10 != 0) {
    0x1000000000000806    |        pcVar3 = pcStack_20;
    0x100000000000080a    |        iVar4 = iStack_10;
    0x1000000000000814    |        puVar7 = puVar6;
    0x1000000000000814    |        *(puVar6 + -8) = 0x1000000000000819;
    0x1000000000000814    |        sym.imp.strcpy(iVar4,pcVar3);
    0x1000000000000819    |        pcVar3 = pcStack_18;
    0x100000000000081d    |        iVar4 = iStack_10;
    0x1000000000000827    |        puVar8 = puVar7;
    0x1000000000000827    |        *(puVar7 + -8) = 0x100000000000082c;
    0x1000000000000827    |        sym.imp.strcat(iVar4,pcVar3);
    0x100000000000082c    |        iVar4 = iStack_10;
    0x1000000000000833    |        *(puVar8 + -8) = 0x1000000000000838;
    0x1000000000000833    |        sym.imp.puts(iVar4);
    0x1000000000000838    |        iVar4 = iStack_10;
    0x100000000000083f    |        *(puVar8 + -8) = 0x1000000000000844;
    0x100000000000083f    |        sym.imp.free(iVar4);
                          |    }
    0x1000000000000846    |    return;
                          |}
                          |
EOF
CMDS=<<EOF
s main
af
pdgo
EOF
RUN

NAME=pdgs
FILE=-
EXPECT=<<EOF
6502:LE:16:default
65C02:LE:16:default
80251:BE:24:default
80390:BE:24:default
8051:BE:16:default
8051:BE:24:mx51
AARCH64:BE:32:ilp32
AARCH64:BE:64:v8A
AARCH64:LE:32:ilp32
AARCH64:LE:64:AppleSilicon
AARCH64:LE:64:v8A
ARM:BE:32:Cortex
ARM:BE:32:v4
ARM:BE:32:v4t
ARM:BE:32:v5
ARM:BE:32:v5t
ARM:BE:32:v6
ARM:BE:32:v7
ARM:BE:32:v8
ARM:BE:32:v8-m
ARM:BE:32:v8T
ARM:LE:32:Cortex
ARM:LE:32:v4
ARM:LE:32:v4t
ARM:LE:32:v5
ARM:LE:32:v5t
ARM:LE:32:v6
ARM:LE:32:v7
ARM:LE:32:v8
ARM:LE:32:v8-m
ARM:LE:32:v8T
ARM:LEBE:32:v7LEInstruction
ARM:LEBE:32:v8LEInstruction
DATA:BE:64:default
DATA:LE:64:default
JVM:BE:32:default
MCS96:LE:16:default
MIPS:BE:32:R6
MIPS:BE:32:default
MIPS:BE:32:micro
MIPS:BE:64:64-32R6addr
MIPS:BE:64:64-32addr
MIPS:BE:64:R6
MIPS:BE:64:default
MIPS:BE:64:micro
MIPS:BE:64:micro64-32addr
MIPS:LE:32:R6
MIPS:LE:32:default
MIPS:LE:32:micro
MIPS:LE:64:64-32R6addr
MIPS:LE:64:64-32addr
MIPS:LE:64:R6
MIPS:LE:64:default
MIPS:LE:64:micro
MIPS:LE:64:micro64-32addr
PowerPC:BE:32:4xx
PowerPC:BE:32:MPC8270
PowerPC:BE:32:QUICC
PowerPC:BE:32:default
PowerPC:BE:32:e500
PowerPC:BE:32:e500mc
PowerPC:BE:64:64-32addr
PowerPC:BE:64:A2-32addr
PowerPC:BE:64:A2ALT
PowerPC:BE:64:A2ALT-32addr
PowerPC:BE:64:VLE-32addr
PowerPC:BE:64:VLEALT-32addr
PowerPC:BE:64:default
PowerPC:LE:32:4xx
PowerPC:LE:32:QUICC
PowerPC:LE:32:default
PowerPC:LE:32:e500
PowerPC:LE:32:e500mc
PowerPC:LE:64:64-32addr
PowerPC:LE:64:A2-32addr
PowerPC:LE:64:A2ALT
PowerPC:LE:64:A2ALT-32addr
PowerPC:LE:64:default
RISCV:LE:32:RV32G
RISCV:LE:32:RV32GC
RISCV:LE:32:RV32I
RISCV:LE:32:RV32IC
RISCV:LE:32:RV32IMC
RISCV:LE:32:default
RISCV:LE:64:RV64G
RISCV:LE:64:RV64GC
RISCV:LE:64:RV64I
RISCV:LE:64:RV64IC
RISCV:LE:64:default
STM8:BE:16:default
STM8:BE:24:default
SuperH:BE:32:SH-1
SuperH:BE:32:SH-2
SuperH:BE:32:SH-2A
TI_MSP430:LE:16:default
TI_MSP430X:LE:32:default
V850:LE:32:default
avr32:BE:32:default
avr8:LE:16:atmega256
avr8:LE:16:default
avr8:LE:16:extended
avr8:LE:24:xmega
sparc:BE:32:default
sparc:BE:64:default
tricore:LE:32:default
tricore:LE:32:tc172x
tricore:LE:32:tc176x
tricore:LE:32:tc29x
x86:LE:16:Protected Mode
x86:LE:16:Real Mode
x86:LE:32:System Management Mode
x86:LE:32:default
x86:LE:64:compat32
x86:LE:64:default
z180:LE:16:default
z182:LE:16:default
z80:LE:16:default
z8401x:LE:16:default
EOF
CMDS=<<EOF
pdgs
EOF
RUN

NAME=pdgsd
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
push ebp
mov ebp, esp
sub esp, 0x88
and esp, 0xfffffff0
mov eax, 0
add eax, 0xf
add eax, 0xf
shr eax, 4
-----
0x08048540: PUSH EBP
    (unique,0x9c00,4) = COPY EBP
    ESP = INT_SUB ESP, 0x4
0x08048541: MOV EBP,ESP
    EBP = COPY ESP
0x08048543: SUB ESP,0x88
    CF = INT_LESS ESP, 0x88
    OF = INT_SBORROW ESP, 0x88
    ESP = INT_SUB ESP, 0x88
    SF = INT_SLESS ESP, 0x0
    ZF = INT_EQUAL ESP, 0x0
    (unique,0xdd80,4) = INT_AND ESP, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048549: AND ESP,0xfffffff0
    CF = COPY 0x0
    OF = COPY 0x0
    ESP = INT_AND ESP, 0xfffffff0
    SF = INT_SLESS ESP, 0x0
    ZF = INT_EQUAL ESP, 0x0
    (unique,0xdd80,4) = INT_AND ESP, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x0804854c: MOV EAX,0x0
    EAX = COPY 0x0
0x08048551: ADD EAX,0xf
    CF = INT_CARRY EAX, 0xf
    OF = INT_SCARRY EAX, 0xf
    EAX = INT_ADD EAX, 0xf
    SF = INT_SLESS EAX, 0x0
    ZF = INT_EQUAL EAX, 0x0
    (unique,0xdd80,4) = INT_AND EAX, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048554: ADD EAX,0xf
    CF = INT_CARRY EAX, 0xf
    OF = INT_SCARRY EAX, 0xf
    EAX = INT_ADD EAX, 0xf
    SF = INT_SLESS EAX, 0x0
    ZF = INT_EQUAL EAX, 0x0
    (unique,0xdd80,4) = INT_AND EAX, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048557: SHR EAX,0x4
    (unique,0x3ec00,4) = INT_AND 0x4, 0x1f
    (unique,0x3ec80,4) = COPY EAX
    EAX = INT_RIGHT EAX, (unique,0x3ec00,4)
    (unique,0x11280,1) = INT_NOTEQUAL (unique,0x3ec00,4), 0x0
    (unique,0x11300,4) = INT_SUB (unique,0x3ec00,4), 0x1
    (unique,0x11380,4) = INT_RIGHT (unique,0x3ec80,4), (unique,0x11300,4)
    (unique,0x11400,4) = INT_AND (unique,0x11380,4), 0x1
    (unique,0x11500,1) = INT_NOTEQUAL (unique,0x11400,4), 0x0
    (unique,0x11580,1) = BOOL_NEGATE (unique,0x11280,1)
    (unique,0x11600,1) = INT_AND (unique,0x11580,1), CF
    (unique,0x11680,1) = INT_AND (unique,0x11280,1), (unique,0x11500,1)
    CF = INT_OR (unique,0x11600,1), (unique,0x11680,1)
    (unique,0x11800,1) = INT_EQUAL (unique,0x3ec00,4), 0x1
    (unique,0x11900,1) = INT_SLESS (unique,0x3ec80,4), 0x0
    (unique,0x11980,1) = BOOL_NEGATE (unique,0x11800,1)
    (unique,0x11a00,1) = INT_AND (unique,0x11980,1), OF
    (unique,0x11a80,1) = INT_AND (unique,0x11800,1), (unique,0x11900,1)
    OF = INT_OR (unique,0x11a00,1), (unique,0x11a80,1)
    (unique,0xe000,1) = INT_NOTEQUAL (unique,0x3ec00,4), 0x0
    (unique,0xe100,1) = INT_SLESS EAX, 0x0
    (unique,0xe180,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe200,1) = INT_AND (unique,0xe180,1), SF
    (unique,0xe280,1) = INT_AND (unique,0xe000,1), (unique,0xe100,1)
    SF = INT_OR (unique,0xe200,1), (unique,0xe280,1)
    (unique,0xe400,1) = INT_EQUAL EAX, 0x0
    (unique,0xe480,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe500,1) = INT_AND (unique,0xe480,1), ZF
    (unique,0xe580,1) = INT_AND (unique,0xe000,1), (unique,0xe400,1)
    ZF = INT_OR (unique,0xe500,1), (unique,0xe580,1)
    (unique,0xe680,4) = INT_AND EAX, 0xff
    (unique,0xe700,1) = POPCOUNT (unique,0xe680,4)
    (unique,0xe780,1) = INT_AND (unique,0xe700,1), 0x1
    (unique,0xe880,1) = INT_EQUAL (unique,0xe780,1), 0x0
    (unique,0xe900,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe980,1) = INT_AND (unique,0xe900,1), PF
    (unique,0xea00,1) = INT_AND (unique,0xe000,1), (unique,0xe880,1)
    PF = INT_OR (unique,0xe980,1), (unique,0xea00,1)
EOF
CMDS=<<EOF
s main
pi 8
?e -----
pdgsd 8~!STORE
EOF
RUN

NAME=comments
FILE=bins/elf/crackme0x05
EXPECT=<<EOF

uint main(void)

{
    uint32_t uVar1;
    uchar auStack_8c [16];
    uchar auStack_7c [120];
    
    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    *(uVar1 - 0x14) = 0x804856b;
    sym.imp.printf();
    *(uVar1 - 0x10) = "Password: ";
    *(uVar1 - 0x14) = 0x8048577;
    sym.imp.printf();
    *(uVar1 - 0xc) = &stack0xffffff84;
    *(uVar1 - 0x10) = 0x80486b2;
    *(uVar1 - 0x14) = 0x804858a;
    sym.imp.scanf();
    *(uVar1 - 0x10) = &stack0xffffff84;
    *((uVar1 - 0x10) + -4) = 0x8048595;
    sym.check();
    return 0;
}

EOF
CMDS=<<EOF
CCu base64:bWFpbiBzdGFydHMgaGVyZQ== @ 0x08048540
CCu base64:cHJpbnRmIGNhbGwgaGVyZQ== @ 0x08048566
CCu base64:bWFpbiByZXR1cm5zIGhlcmU= @ 0x0804859b
CCu base64:bm90aGluZyB0byBzZWUgaGVyZQ== @ 0x0804859c
CCu base64:c2NhbmYgY2FsbCBoZXJl @ 0x08048585
s main
af
pdg
EOF
RUN

NAME=comment-function_name-offset
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
                  |
    0x08048540    |uint main(void)
                  |
                  |{
                  |    uint32_t uVar1;
                  |    uchar auStack_8c [16];
                  |    uchar auStack_7c [120];
                  |    
    0x08048549    |    uVar1 = *0x10 + -0x8c & 0xfffffff0;
    0x0804855f    |    *(uVar1 - 0x10) = "IOLI Crackme Level 0x05\n";
    0x08048566    |    *(uVar1 - 0x14) = 0x804856b;
    0x08048566    |    sym.imp.printf();
    0x0804856b    |    *(uVar1 - 0x10) = "Password: ";
    0x08048572    |    *(uVar1 - 0x14) = 0x8048577;
    0x08048572    |    sym.imp.printf();
    0x0804857a    |    *(uVar1 - 0xc) = &stack0xffffff84;
    0x0804857e    |    *(uVar1 - 0x10) = 0x80486b2;
    0x08048585    |    *(uVar1 - 0x14) = 0x804858a;
    0x08048585    |    sym.imp.scanf();
    0x0804858d    |    *(uVar1 - 0x10) = &stack0xffffff84;
    0x08048590    |    *((uVar1 - 0x10) + -4) = 0x8048595;
    0x08048590    |    sym.check();
    0x0804859b    |    return 0;
                  |}
                  |
EOF
CMDS=<<EOF
CCu base64:bWFpbiBzdGFydHMgaGVyZQ== @ 0x08048540
CCu base64:cHJpbnRmIGNhbGwgaGVyZQ== @ 0x08048566
CCu base64:bWFpbiByZXR1cm5zIGhlcmU= @ 0x0804859b
CCu base64:bm90aGluZyB0byBzZWUgaGVyZQ== @ 0x0804859c
CCu base64:c2NhbmYgY2FsbCBoZXJl @ 0x08048585
s main
af
pdgo
EOF
RUN

NAME=recursive type
FILE=bins/rec
CMDS=<<EOF
to bins/types_rec.h
aaa
s sym.KillList
afvt arg1 LL
afvt ptr LL
pdg
EOF
EXPECT=<<EOF

void sym.KillList(int64_t param_1)

{
    int64_t iVar1;
    uchar *puVar2;
    uchar auStack_28 [8];
    int64_t iStack_20;
    int64_t iStack_10;
    
    puVar2 = *0x20 + -0x28;
    iStack_20 = param_1;
    while (iStack_20 != 0) {
        iStack_10 = *(iStack_20 + 8);
        iVar1 = iStack_20;
        *(puVar2 + -8) = 0x4011ad;
        sym.imp.free(iVar1);
        puVar2 = puVar2;
        iStack_20 = iStack_10;
    }
    return;
}

EOF
RUN

NAME=strings
FILE=bins/strings
CMDS=<<EOF
aaa
afvt arg1 char16_t * @ sym.use_utf16
pdg @ main
EOF
EXPECT=<<EOF

ulong main(void)

{
    ulong uStack_10;
    
    uStack_10 = 0x40114f;
    sym.imp.puts("Hello this is a regular string\n");
    *(*0x20 + -0x10) = 0x401159;
    sym.use_utf16(L"Henlo completely obsolete encoding\n");
    *(*0x20 + -8 + -8) = 0x40116d;
    sym.imp.fputws(L"This is a wiiiiiiiiiiiide string\n",_reloc.stdout);
    return 0;
}

EOF
RUN

NAME=strings
FILE=bins/strings
CMDS=<<EOF
aaa
afvt arg1 char16_t * @ sym.use_utf16
pdg @ main
EOF
EXPECT=<<EOF

ulong main(void)

{
    ulong uStack_10;
    
    uStack_10 = 0x40114f;
    sym.imp.puts("Hello this is a regular string\n");
    *(*0x20 + -0x10) = 0x401159;
    sym.use_utf16(L"Henlo completely obsolete encoding\n");
    *(*0x20 + -8 + -8) = 0x40116d;
    sym.imp.fputws(L"This is a wiiiiiiiiiiiide string\n",_reloc.stdout);
    return 0;
}

EOF
RUN
