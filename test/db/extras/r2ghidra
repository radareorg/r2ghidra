NAME=x86_32
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
x86:LE:32:default:gcc

uint main(void)

{
    uchar auStack_7c [120];
    
    sym.imp.printf("IOLI Crackme Level 0x05\n");
    sym.imp.printf("Password: ");
    sym.imp.scanf(0x80486b2,auStack_7c);
    sym.check(auStack_7c);
    return 0;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN

NAME=x86_32
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
                                                |
    0x08048540 push ebp                         |uint main(void)
                                                |
                                                |{
                                                |    uchar auStack_7c [120];
                                                |    
    0x08048566 call sym.imp.printf              |    sym.imp.printf("IOLI Crackme Level 0x05\n");
    0x08048572 call sym.imp.printf              |    sym.imp.printf("Password: ");
    0x08048585 call sym.imp.scanf               |    sym.imp.scanf(0x80486b2,auStack_7c);
    0x08048590 call sym.check                   |    sym.check(auStack_7c);
    0x0804859b ret                              |    return 0;
                                                |}
                                                |
x86
x86:LE:32:default:gcc

uint main(void)

{
    uchar auStack_7c [120];
    
    sym.imp.printf("IOLI Crackme Level 0x05\n");
    sym.imp.printf("Password: ");
    sym.imp.scanf(0x80486b2,auStack_7c);
    sym.check(auStack_7c);
    return 0;
}

EOF
CMDS=<<EOF
s main
af
pdga
e asm.arch
pdgss
pdg
EOF
RUN

NAME=x86_64
FILE=bins/elf/hello_world
EXPECT=<<EOF
x86:LE:64:default:gcc

void main(void)

{
    int iVar1;
    int iVar2;
    int64_t iVar3;
    
    iVar1 = sym.imp.strlen(0x8d4);
    iVar2 = sym.imp.strlen(0x8da);
    iVar3 = sym.imp.malloc(iVar2 + iVar1 + 1);
    if (iVar3 != 0) {
        sym.imp.strcpy(iVar3,0x8d4);
        sym.imp.strcat(iVar3,0x8da);
        sym.imp.puts(iVar3);
        sym.imp.free(iVar3);
    }
    return;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN

NAME=x86_16
FILE=bins/mz/unzip.exe
EXPECT=<<EOF
x86:LE:16:Real Mode:

uint fcn.00001c98(ushort param_1,ushort param_2,ushort param_3,uint param_4,int16_t param_5)

{
    int16_t *piVar1;
    int16_t iVar2;
    ushort uVar3;
    ushort unaff_CS;
    ushort unaff_DS;
    ushort uStack_a;
    int16_t iStack_6;
    char cStack_4;
    
    uStack_a = 0x13da;
    do {
        func_0x0000ec24(unaff_CS,uStack_a,unaff_DS,0x401e);
        func_0x0000ec24(0xdee,param_2,param_3,0x401e);
        func_0x0000e59a(0xdee,0x401e);
        iStack_6 = 0;
        do {
            cStack_4 = func_0x0000eb82(0xdee);
            if (cStack_4 == '\r') {
                cStack_4 = '\n';
            }
            iVar2 = param_4;
            uVar3 = param_4 >> 0x10;
            if (iStack_6 < param_5) {
                *(iVar2 + iStack_6) = cStack_4;
                iStack_6 = iStack_6 + 1;
            }
        } while (cStack_4 != '\n');
        piVar1 = 0x4022;
        *piVar1 = *piVar1 + -1;
        if (*piVar1 < 0) {
            func_0x0000e4ae(0xdee,10,0x401e);
        }
        else {
            **0x401e = 10;
            *0x401e = *0x401e + 1;
        }
        unaff_CS = 0xdee;
        func_0x0000e59a(0xdee,0x401e);
        uStack_a = 0x13db;
    } while (*(iVar2 + iStack_6 + -1) != '\n');
    *(iVar2 + iStack_6 + -1) = 0;
    return param_4;
}

EOF
CMDS=<<EOF
pdgss
s 0x1c98
af
pdg
EOF
RUN

NAME=x86_64
FILE=bins/elf/hello_world
EXPECT=<<EOF
x86:LE:64:default:gcc

void main(void)

{
    int iVar1;
    int iVar2;
    int64_t iVar3;
    
    iVar1 = sym.imp.strlen(0x8d4);
    iVar2 = sym.imp.strlen(0x8da);
    iVar3 = sym.imp.malloc(iVar2 + iVar1 + 1);
    if (iVar3 != 0) {
        sym.imp.strcpy(iVar3,0x8d4);
        sym.imp.strcat(iVar3,0x8da);
        sym.imp.puts(iVar3);
        sym.imp.free(iVar3);
    }
    return;
}

EOF
CMDS=<<EOF
pdgss
s main
af
pdg
EOF
RUN


NAME=6502
FILE=bins/prg/t01.prg
ARGS=-F prg
EXPECT=<<EOF
6502:LE:16:default:

void fcn.0000080e(void)

{
    uchar uVar1;
    uint8_t uVar2;
    
    uVar2 = 0xff;
    do {
        *(uVar2 + 0x3ff) = 0x41;
        uVar1 = *0x824;
        uVar2 = uVar2 - 1;
    } while (uVar2 != 0);
    uVar2 = 0xff;
    do {
        *(uVar2 + 0xd7ff) = uVar1;
        uVar2 = uVar2 - 1;
    } while (uVar2 != 0);
    return;
}

EOF
CMDS=<<EOF
pdgss
s 0x080e
af
pdg
EOF
RUN


NAME=rawptr
FILE=bins/dectest32
EXPECT=<<EOF

uint sym.get_global_array_entry(void)

{
    return *0x804c034;
}

--

uint sym.get_global_array_entry(void)

{
    return uRam0804c034;
}

EOF
CMDS=<<EOF
s sym.get_global_array_entry
af
e r2ghidra.rawptr=1
pdg
?e --
e r2ghidra.rawptr=0
pdg
EOF
RUN

NAME=global flag
FILE=bins/dectest32
EXPECT=<<EOF

uint sym.get_global_var(void)

{
    return _obj.global_var;
}

--

//WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint sym.get_global_var(void)

{
    return _obj.global_var;
}

EOF
CMDS=<<EOF
s sym.get_global_var
af
e r2ghidra.rawptr=1
pdg
?e --
e r2ghidra.rawptr=0
pdg
EOF
RUN

NAME=function variable annotations
FILE=bins/dectest64
EXPECT=<<EOF
{
  "code": "\nulong main(uint param_1,ulong param_2)\n\n{\n    ulong uVar1;\n    int64_t in_FS_OFFSET;\n    uchar auStack_28 [24];\n    int64_t iStack_10;\n    \n    iStack_10 = *(in_FS_OFFSET + 0x28);\n    sym.Aeropause(auStack_28,param_1,param_2);\n    uVar1 = 0;\n    if (iStack_10 != *(in_FS_OFFSET + 0x28)) {\n        uVar1 = sym.imp.__stack_chk_fail();\n    }\n    return uVar1;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 6,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 7,
      "end": 11,
      "type": "function_name",
      "name": "main",
      "offset": 4198782
    },
    {
      "start": 7,
      "end": 11,
      "type": "offset",
      "offset": 4198782
    },
    {
      "start": 7,
      "end": 11,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 12,
      "end": 16,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 17,
      "end": 24,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 17,
      "end": 24,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 25,
      "end": 30,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 31,
      "end": 38,
      "type": "function_parameter",
      "name": "param_2"
    },
    {
      "start": 31,
      "end": 38,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 47,
      "end": 52,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 53,
      "end": 58,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 53,
      "end": 58,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 64,
      "end": 71,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 72,
      "end": 84,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 72,
      "end": 84,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 90,
      "end": 95,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 96,
      "end": 106,
      "type": "local_variable",
      "name": "auStack_28"
    },
    {
      "start": 96,
      "end": 106,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 108,
      "end": 110,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 117,
      "end": 124,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 125,
      "end": 134,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 125,
      "end": 134,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 145,
      "end": 154,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 145,
      "end": 154,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 155,
      "end": 156,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 157,
      "end": 158,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 159,
      "end": 171,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 159,
      "end": 171,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 172,
      "end": 173,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 174,
      "end": 178,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 145,
      "end": 179,
      "type": "offset",
      "offset": 4198797
    },
    {
      "start": 185,
      "end": 198,
      "type": "function_name",
      "name": "sym.Aeropause",
      "offset": 4199038
    },
    {
      "start": 185,
      "end": 198,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 199,
      "end": 209,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 209,
      "end": 210,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 210,
      "end": 217,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 210,
      "end": 217,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 217,
      "end": 218,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 218,
      "end": 225,
      "type": "function_parameter",
      "name": "param_2"
    },
    {
      "start": 218,
      "end": 225,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 185,
      "end": 226,
      "type": "offset",
      "offset": 4198828
    },
    {
      "start": 232,
      "end": 237,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 232,
      "end": 237,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 238,
      "end": 239,
      "type": "offset",
      "offset": 4198833
    },
    {
      "start": 240,
      "end": 241,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 232,
      "end": 241,
      "type": "offset",
      "offset": 4198833
    },
    {
      "start": 247,
      "end": 249,
      "type": "offset",
      "offset": 4198851
    },
    {
      "start": 247,
      "end": 249,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 251,
      "end": 260,
      "type": "local_variable",
      "name": "iStack_10"
    },
    {
      "start": 251,
      "end": 260,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 261,
      "end": 263,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 264,
      "end": 265,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 266,
      "end": 278,
      "type": "local_variable",
      "name": "in_FS_OFFSET"
    },
    {
      "start": 266,
      "end": 278,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 279,
      "end": 280,
      "type": "offset",
      "offset": 4198842
    },
    {
      "start": 281,
      "end": 285,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 298,
      "end": 303,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 298,
      "end": 303,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 304,
      "end": 305,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 306,
      "end": 330,
      "type": "function_name",
      "name": "sym.imp.__stack_chk_fail",
      "offset": 4198464
    },
    {
      "start": 306,
      "end": 330,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 298,
      "end": 332,
      "type": "offset",
      "offset": 4198853
    },
    {
      "start": 344,
      "end": 350,
      "type": "offset",
      "offset": 4198859
    },
    {
      "start": 344,
      "end": 350,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 351,
      "end": 356,
      "type": "local_variable",
      "name": "uVar1"
    },
    {
      "start": 351,
      "end": 356,
      "type": "syntax_highlight",
      "syntax_highlight": "local_variable"
    },
    {
      "start": 344,
      "end": 356,
      "type": "offset",
      "offset": 4198859
    }
  ]
}
EOF
CMDS=<<EOF
s main
af
pdgj~{}
EOF
RUN

NAME=global variable annotation
FILE=bins/dectest32
EXPECT=<<EOF
{
  "code": "\nuint sym.get_global_array_entry(void)\n\n{\n    return *0x804c034;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 5,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 6,
      "end": 32,
      "type": "function_name",
      "name": "sym.get_global_array_entry",
      "offset": 134517184
    },
    {
      "start": 6,
      "end": 32,
      "type": "offset",
      "offset": 134517184
    },
    {
      "start": 6,
      "end": 32,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 33,
      "end": 37,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 46,
      "end": 52,
      "type": "offset",
      "offset": 134517193
    },
    {
      "start": 46,
      "end": 52,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 53,
      "end": 54,
      "type": "offset",
      "offset": 134517187
    },
    {
      "start": 54,
      "end": 63,
      "type": "global_variable",
      "offset": 134529076
    },
    {
      "start": 54,
      "end": 63,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 46,
      "end": 63,
      "type": "offset",
      "offset": 134517193
    }
  ]
}
EOF
CMDS=<<EOF
s sym.get_global_array_entry
af
pdgj~{}
EOF
RUN

NAME=constant variable annotation
FILE=bins/dectest32
EXPECT=<<EOF
{
  "code": "\nvoid sym.PrintAmbassador(uint32_t param_1)\n\n{\n    func_0x08049050(\"Ambassador value: \");\n    if (param_1 < 5) {\n        switch(param_1) {\n        case 0:\n            func_0x08049050(\"pure\");\n            break;\n        case 1:\n            func_0x08049050(\"reason\");\n            break;\n        case 2:\n            func_0x08049050(\"revolution\");\n            break;\n        case 3:\n            func_0x08049050(\"echoes\");\n            break;\n        case 4:\n            func_0x08049050(\"wall\");\n        }\n    }\n    else if (param_1 == 1000000) {\n        func_0x08049050(\"million\");\n    }\n    func_0x08049090(10);\n    return;\n}\n\n",
  "annotations": [
    {
      "start": 1,
      "end": 5,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 6,
      "end": 25,
      "type": "function_name",
      "name": "sym.PrintAmbassador",
      "offset": 134517281
    },
    {
      "start": 6,
      "end": 25,
      "type": "offset",
      "offset": 134517281
    },
    {
      "start": 6,
      "end": 25,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 26,
      "end": 34,
      "type": "syntax_highlight",
      "syntax_highlight": "datatype"
    },
    {
      "start": 35,
      "end": 42,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 35,
      "end": 42,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 51,
      "end": 66,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 51,
      "end": 66,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 67,
      "end": 87,
      "type": "constant_variable",
      "offset": 134520840
    },
    {
      "start": 67,
      "end": 87,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 51,
      "end": 88,
      "type": "offset",
      "offset": 134517295
    },
    {
      "start": 94,
      "end": 96,
      "type": "offset",
      "offset": 134517307
    },
    {
      "start": 94,
      "end": 96,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 98,
      "end": 105,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 98,
      "end": 105,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 106,
      "end": 107,
      "type": "offset",
      "offset": 134517307
    },
    {
      "start": 108,
      "end": 109,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 121,
      "end": 127,
      "type": "offset",
      "offset": 134517332
    },
    {
      "start": 121,
      "end": 127,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 128,
      "end": 135,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 128,
      "end": 135,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 147,
      "end": 151,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 167,
      "end": 182,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 167,
      "end": 182,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 183,
      "end": 189,
      "type": "constant_variable",
      "offset": 134520859
    },
    {
      "start": 183,
      "end": 189,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 167,
      "end": 190,
      "type": "offset",
      "offset": 134517353
    },
    {
      "start": 204,
      "end": 209,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 204,
      "end": 210,
      "type": "offset",
      "offset": 134517361
    },
    {
      "start": 219,
      "end": 223,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 239,
      "end": 254,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 239,
      "end": 254,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 255,
      "end": 263,
      "type": "constant_variable",
      "offset": 134520864
    },
    {
      "start": 255,
      "end": 263,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 239,
      "end": 264,
      "type": "offset",
      "offset": 134517371
    },
    {
      "start": 278,
      "end": 283,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 278,
      "end": 284,
      "type": "offset",
      "offset": 134517379
    },
    {
      "start": 293,
      "end": 297,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 313,
      "end": 328,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 313,
      "end": 328,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 329,
      "end": 341,
      "type": "constant_variable",
      "offset": 134520871
    },
    {
      "start": 329,
      "end": 341,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 313,
      "end": 342,
      "type": "offset",
      "offset": 134517389
    },
    {
      "start": 356,
      "end": 361,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 356,
      "end": 362,
      "type": "offset",
      "offset": 134517397
    },
    {
      "start": 371,
      "end": 375,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 391,
      "end": 406,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 391,
      "end": 406,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 407,
      "end": 415,
      "type": "constant_variable",
      "offset": 134520882
    },
    {
      "start": 407,
      "end": 415,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 391,
      "end": 416,
      "type": "offset",
      "offset": 134517407
    },
    {
      "start": 430,
      "end": 435,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 430,
      "end": 436,
      "type": "offset",
      "offset": 134517415
    },
    {
      "start": 445,
      "end": 449,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 465,
      "end": 480,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 465,
      "end": 480,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 481,
      "end": 487,
      "type": "constant_variable",
      "offset": 134520889
    },
    {
      "start": 481,
      "end": 487,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 465,
      "end": 488,
      "type": "offset",
      "offset": 134517425
    },
    {
      "start": 510,
      "end": 514,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 515,
      "end": 517,
      "type": "offset",
      "offset": 134517341
    },
    {
      "start": 515,
      "end": 517,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 519,
      "end": 526,
      "type": "function_parameter",
      "name": "param_1"
    },
    {
      "start": 519,
      "end": 526,
      "type": "syntax_highlight",
      "syntax_highlight": "function_parameter"
    },
    {
      "start": 527,
      "end": 529,
      "type": "offset",
      "offset": 134517334
    },
    {
      "start": 530,
      "end": 537,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 549,
      "end": 564,
      "type": "function_name",
      "name": "",
      "offset": 134516816
    },
    {
      "start": 549,
      "end": 564,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 565,
      "end": 574,
      "type": "constant_variable",
      "offset": 134520894
    },
    {
      "start": 565,
      "end": 574,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 549,
      "end": 575,
      "type": "offset",
      "offset": 134517443
    },
    {
      "start": 587,
      "end": 602,
      "type": "function_name",
      "name": "",
      "offset": 134516880
    },
    {
      "start": 587,
      "end": 602,
      "type": "syntax_highlight",
      "syntax_highlight": "function_name"
    },
    {
      "start": 603,
      "end": 605,
      "type": "syntax_highlight",
      "syntax_highlight": "constant_variable"
    },
    {
      "start": 587,
      "end": 606,
      "type": "offset",
      "offset": 134517459
    },
    {
      "start": 612,
      "end": 618,
      "type": "offset",
      "offset": 134517469
    },
    {
      "start": 612,
      "end": 618,
      "type": "syntax_highlight",
      "syntax_highlight": "keyword"
    },
    {
      "start": 612,
      "end": 618,
      "type": "offset",
      "offset": 134517469
    }
  ]
}
EOF
CMDS=<<EOF
s sym.PrintAmbassador
af
pdgj~{}
EOF
RUN

NAME=aeropause32 (many features combined)
FILE=bins/dectest32
EXPECT=<<EOF

void sym.Aeropause(int *param_1,uint param_2,uint param_3)

{
    uint32_t uVar1;
    int iVar2;
    
    iVar2 = sym.imp.malloc(8);
    *param_1 = iVar2;
    **param_1 = param_2;
    *(*param_1 + 4) = param_3;
    if (**param_1 < 2) {
        param_1[2] = 0;
    }
    else {
        param_1[1] = *(*(*param_1 + 4) + 4);
        iVar2 = sym.imp.strcmp(param_1[1],0x804a05c);
        if (iVar2 == 0) {
            param_1[2] = 1;
        }
        else {
            iVar2 = sym.imp.strcmp(param_1[1],"dark");
            if (iVar2 == 0) {
                param_1[2] = 2;
            }
            else {
                iVar2 = sym.imp.strcmp(param_1[1],"third");
                if (iVar2 == 0) {
                    param_1[2] = 3;
                }
                else {
                    param_1[2] = 1000000;
                }
            }
        }
    }
    uVar1 = param_1[2];
    if (uVar1 < 5) {
    //switch table (5 cases) at 0x804a070
        switch(uVar1) {
        case 0:
            sym.imp.printf("pure");
            break;
        case 1:
            sym.imp.printf("reason");
            break;
        case 2:
            sym.imp.printf("revolution");
            break;
        case 3:
            sym.imp.printf("echoes");
            break;
        case 4:
            sym.imp.printf("wall");
        }
    }
    else if (uVar1 == 1000000) {
        sym.imp.printf("million");
    }
    sym.PrintAmbassador(param_1[2]);
    return;
}

EOF
CMDS=<<EOF
aaa
to bins/types.h
s sym.Aeropause
afvb 8 bright Bright *
afvb 12 argc int32_t
afvb 16 argv const char **
pdg
EOF
RUN

NAME=aeropause64 (many features combined)
FILE=bins/dectest64
EXPECT=<<EOF

void sym.Aeropause(int64_t *param_1,uint param_2,ulong param_3)

{
    uint32_t uVar1;
    int iVar2;
    int64_t iVar3;
    
    iVar3 = sym.imp.malloc(0x10);
    *param_1 = iVar3;
    **param_1 = param_2;
    *(*param_1 + 8) = param_3;
    if (**param_1 < 2) {
        *(param_1 + 2) = 0;
    }
    else {
        param_1[1] = *(*(*param_1 + 8) + 8);
        iVar2 = sym.imp.strcmp(param_1[1],"the  ");
        if (iVar2 == 0) {
            *(param_1 + 2) = 1;
        }
        else {
            iVar2 = sym.imp.strcmp(param_1[1],"dark");
            if (iVar2 == 0) {
                *(param_1 + 2) = 2;
            }
            else {
                iVar2 = sym.imp.strcmp(param_1[1],"third");
                if (iVar2 == 0) {
                    *(param_1 + 2) = 3;
                }
                else {
                    *(param_1 + 2) = 1000000;
                }
            }
        }
    }
    uVar1 = *(param_1 + 2);
    if (uVar1 < 5) {
    //switch table (5 cases) at 0x402088
        switch(uVar1) {
        case 0:
            sym.imp.printf("pure");
            break;
        case 1:
            sym.imp.printf("reason");
            break;
        case 2:
            sym.imp.printf("revolution");
            break;
        case 3:
            sym.imp.printf("echoes");
            break;
        case 4:
            sym.imp.printf("wall");
        }
    }
    else if (uVar1 == 1000000) {
        sym.imp.printf("million");
    }
    sym.PrintAmbassador(param_1[2]);
    return;
}

EOF
CMDS=<<EOF
aaa

# TODO: remove these when r2 can do it automatically
afvr rdi format const char * @ sym.imp.printf
afvr rdi size size_t @ sym.imp.malloc
afvr rdi s1 const char * @ sym.imp.strcmp
afvr rsi s2 const char * @ sym.imp.strcmp

to bins/types.h
# TODO: remove when parsed struct from r2 is correct
k anal/types/struct.Bright.ambassador=enum Ambassador,16,0
k anal/types/struct.Bright.window=struct Window,8,0

s sym.Aeropause
afvr rdi bright Bright *
afvr rsi argc int32_t
afvr rdx argv const char **
pdg
EOF
RUN

NAME=typedef
FILE=bins/dectest32
EXPECT=<<EOF

void sym.Aeropause(int *param_1,uint param_2,uint param_3)

{
    uint32_t uVar1;
    int iVar2;
    
    iVar2 = sym.imp.malloc(8);
    *param_1 = iVar2;
    **param_1 = param_2;
    *(*param_1 + 4) = param_3;
    if (**param_1 < 2) {
        param_1[2] = 0;
    }
    else {
        param_1[1] = *(*(*param_1 + 4) + 4);
        iVar2 = sym.imp.strcmp(param_1[1],0x804a05c);
        if (iVar2 == 0) {
            param_1[2] = 1;
        }
        else {
            iVar2 = sym.imp.strcmp(param_1[1],"dark");
            if (iVar2 == 0) {
                param_1[2] = 2;
            }
            else {
                iVar2 = sym.imp.strcmp(param_1[1],"third");
                if (iVar2 == 0) {
                    param_1[2] = 3;
                }
                else {
                    param_1[2] = 1000000;
                }
            }
        }
    }
    uVar1 = param_1[2];
    if (uVar1 < 5) {
    //switch table (5 cases) at 0x804a070
        switch(uVar1) {
        case 0:
            sym.imp.printf("pure");
            break;
        case 1:
            sym.imp.printf("reason");
            break;
        case 2:
            sym.imp.printf("revolution");
            break;
        case 3:
            sym.imp.printf("echoes");
            break;
        case 4:
            sym.imp.printf("wall");
        }
    }
    else if (uVar1 == 1000000) {
        sym.imp.printf("million");
    }
    sym.PrintAmbassador(param_1[2]);
    return;
}

--

void sym.Aeropause(int *param_1,uint param_2,uint param_3)

{
    uint32_t uVar1;
    int iVar2;
    
    iVar2 = sym.imp.malloc(8);
    *param_1 = iVar2;
    **param_1 = param_2;
    *(*param_1 + 4) = param_3;
    if (**param_1 < 2) {
        param_1[2] = 0;
    }
    else {
        param_1[1] = *(*(*param_1 + 4) + 4);
        iVar2 = sym.imp.strcmp(param_1[1],0x804a05c);
        if (iVar2 == 0) {
            param_1[2] = 1;
        }
        else {
            iVar2 = sym.imp.strcmp(param_1[1],"dark");
            if (iVar2 == 0) {
                param_1[2] = 2;
            }
            else {
                iVar2 = sym.imp.strcmp(param_1[1],"third");
                if (iVar2 == 0) {
                    param_1[2] = 3;
                }
                else {
                    param_1[2] = 1000000;
                }
            }
        }
    }
    uVar1 = param_1[2];
    if (uVar1 < 5) {
    //switch table (5 cases) at 0x804a070
        switch(uVar1) {
        case 0:
            sym.imp.printf("pure");
            break;
        case 1:
            sym.imp.printf("reason");
            break;
        case 2:
            sym.imp.printf("revolution");
            break;
        case 3:
            sym.imp.printf("echoes");
            break;
        case 4:
            sym.imp.printf("wall");
        }
    }
    else if (uVar1 == 1000000) {
        sym.imp.printf("million");
    }
    sym.PrintAmbassador(param_1[2]);
    return;
}

--

void sym.Aeropause(int *param_1,uint param_2,uint param_3)

{
    uint32_t uVar1;
    int iVar2;
    
    iVar2 = sym.imp.malloc(8);
    *param_1 = iVar2;
    **param_1 = param_2;
    *(*param_1 + 4) = param_3;
    if (**param_1 < 2) {
        param_1[2] = 0;
    }
    else {
        param_1[1] = *(*(*param_1 + 4) + 4);
        iVar2 = sym.imp.strcmp(param_1[1],0x804a05c);
        if (iVar2 == 0) {
            param_1[2] = 1;
        }
        else {
            iVar2 = sym.imp.strcmp(param_1[1],"dark");
            if (iVar2 == 0) {
                param_1[2] = 2;
            }
            else {
                iVar2 = sym.imp.strcmp(param_1[1],"third");
                if (iVar2 == 0) {
                    param_1[2] = 3;
                }
                else {
                    param_1[2] = 1000000;
                }
            }
        }
    }
    uVar1 = param_1[2];
    if (uVar1 < 5) {
    //switch table (5 cases) at 0x804a070
        switch(uVar1) {
        case 0:
            sym.imp.printf("pure");
            break;
        case 1:
            sym.imp.printf("reason");
            break;
        case 2:
            sym.imp.printf("revolution");
            break;
        case 3:
            sym.imp.printf("echoes");
            break;
        case 4:
            sym.imp.printf("wall");
        }
    }
    else if (uVar1 == 1000000) {
        sym.imp.printf("million");
    }
    sym.PrintAmbassador(param_1[2]);
    return;
}

EOF
CMDS=<<EOF
aaa
to bins/types.h
s sym.Aeropause
afvb 8 bright BrightPtr
afvb 12 argc Bright *
afvb 16 argv const char **
pdg
?e --
afvb 8 bright BrightTypedefd *
afvb 12 argc int32_t
afvb 16 argv const char **
pdg
?e --
afvb 8 bright BrightTypedefdPtr
pdg
EOF
RUN

NAME=macos args
FILE=bins/mach0/arg
EXPECT=<<EOF

void main(void)

{
    sym._call();
    return;
}

EOF
CMDS=<<EOF
aaa
s main
pdg
EOF
RUN

NAME=Nodup function on container query
FILE=bins/hello-arm
EXPECT=<<EOF

//WARNING: Control flow encountered bad instruction data

void entry0(void)

{
    //[11] -r-x section size 200 named .text
    func_0x0000039c();
    //WARNING: Bad instruction - Truncating control flow here
    halt_baddata();
}

EOF
CMDS=<<EOF
s entry0
af
pdg
EOF
RUN

NAME=code printing
FILE=bins/elf/crackme0x05
EXPECT=<<EOF

uint main(void)

{
    uchar auStack_7c [120];
    
    sym.imp.printf("IOLI Crackme Level 0x05\n");
    sym.imp.printf("Password: ");
    sym.imp.scanf(0x80486b2,auStack_7c);
    sym.check(auStack_7c);
    return 0;
}

--
                  |
    0x08048540    |uint main(void)
                  |
                  |{
                  |    uchar auStack_7c [120];
                  |    
    0x08048566    |    sym.imp.printf("IOLI Crackme Level 0x05\n");
    0x08048572    |    sym.imp.printf("Password: ");
    0x08048585    |    sym.imp.scanf(0x80486b2,auStack_7c);
    0x08048590    |    sym.check(auStack_7c);
    0x0804859b    |    return 0;
                  |}
                  |
--
CCu base64:c3ltLmltcC5zY2FuZigweDgwNDg2YjIsYXVTdGFja183Yyk= @ 0x8048585
CCu base64:bWFpbg== @ 0x8048540
CCu base64:cmV0dXJuIDA= @ 0x804859b
CCu base64:c3ltLmltcC5wcmludGYoIlBhc3N3b3JkOiAiKQ== @ 0x8048572
CCu base64:c3ltLmltcC5wcmludGYoIklPTEkgQ3JhY2ttZSBMZXZlbCAweDA1XG4iKQ== @ 0x8048566
CCu base64:c3ltLmNoZWNrKGF1U3RhY2tfN2Mp @ 0x8048590
--
<result><function>
<function name="main" size="92">
  <localdb main="stack" lock="false">
      <rangelist>
        <range space="stack" first="0x4" last="0x1f7"/>
        <range space="stack" first="0xfff0bdc0" last="0xffffff5f"/>
        <range space="stack" first="0xffffff68" last="0xfffffffb"/>
      </rangelist>
      <symbollist>
        <mapsym>
            <type name="" size="120" metatype="array" arraysize="120">
            </type>
          </symbol>
          <rangelist/>
        </mapsym>
      </symbollist>
    </scope>
  </localdb>
  <ast>
    <varnodes>
    </varnodes>
    <block index="0">
      <rangelist>
        <range space="ram" first="0x8048540" last="0x804859b"/>
      </rangelist>
      <op code="1">
        <seqnum space="ram" offset="0x8048566" uniq="0xe7"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048566" uniq="0x80"/>
        <void/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048572" uniq="0xe8"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048572" uniq="0x85"/>
        <void/>
      </op>
      <op code="66">
        <seqnum space="ram" offset="0x8048577" uniq="0xe9"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048585" uniq="0x8f"/>
        <void/>
      </op>
      <op code="66">
        <seqnum space="ram" offset="0x804858a" uniq="0xea"/>
      </op>
      <op code="7">
        <seqnum space="ram" offset="0x8048590" uniq="0x96"/>
        <void/>
      </op>
      <op code="1">
        <seqnum space="ram" offset="0x8048595" uniq="0x97"/>
      </op>
      <op code="10">
        <seqnum space="ram" offset="0x804859b" uniq="0x9d"/>
        <void/>
      </op>
    </block>
  </ast>
  <highlist>
    <high repref="0x1a3" class="constant">
    </high>
    <high repref="0x1c1" class="constant">
    </high>
    <high repref="0x2ed" class="constant">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2ee" class="constant">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2e2" class="constant">
    </high>
    <high repref="0x2e9" class="constant" symref="0x4000010000000008" offset="0">
    </high>
    <high repref="0x2eb" class="constant" symref="0x4000010000000008" offset="0">
    </high>
    <high repref="0x176" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x190" class="other">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2e4" class="other" typelock="true">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x2e7" class="other" typelock="true">
      <type name="" size="4" metatype="ptr" core="true">
      </type>
    </high>
    <high repref="0x1a2" class="other">
    </high>
    <high repref="0x238" class="other" typelock="true">
      <type name="" size="4" metatype="ptr">
        <type name="" size="0" metatype="spacebase" space="stack">
        </type>
      </type>
    </high>
  </highlist>
  <prototype model="__cdecl" extrapop="4">
    <returnsym>
    </returnsym>
  </prototype>
</function></function><code>
<function>
  <syntax></syntax>
  <break indent="0"/>
  <funcproto>
    <return_type varref="0x1a2">
      <syntax></syntax>
      <syntax></syntax>
    </return_type>
    <syntax> </syntax>
    <funcname color="0x3">main</funcname>
    <syntax></syntax>
    <syntax open="83">(</syntax>
    <syntax></syntax>
    <syntax color="0x0">void</syntax>
    <syntax></syntax>
    <syntax close="83">)</syntax>
  </funcproto>
  <break indent="0"/>
  <syntax></syntax>
  <break indent="0"/>
  <syntax>{</syntax>
  <break indent="4"/>
  <vardecl symref="0x4000010000000008">
    <syntax> </syntax>
    <variable color="0x4">auStack_7c</variable>
    <syntax> </syntax>
    <syntax open="88">[</syntax>
    <syntax></syntax>
    <syntax color="0x5">120</syntax>
    <syntax></syntax>
    <syntax close="88">]</syntax>
  </vardecl>
  <syntax></syntax>
  <syntax>;</syntax>
  <break indent="4"/>
  <block blockref="0">
    <syntax></syntax>
    <break indent="4"/>
    <statement opref="0x80">
      <funcname color="0x3" opref="0x80">sym.imp.printf</funcname>
      <syntax></syntax>
      <syntax open="92">(</syntax>
      <syntax></syntax>
      <variable color="0x5" varref="0x2ed" opref="0xe7">&quot;IOLI Crackme Level 0x05\n&quot;</variable>
      <syntax></syntax>
      <syntax close="92">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x85">
      <funcname color="0x3" opref="0x85">sym.imp.printf</funcname>
      <syntax></syntax>
      <syntax open="95">(</syntax>
      <syntax></syntax>
      <variable color="0x5" varref="0x2ee" opref="0xe8">&quot;Password: &quot;</variable>
      <syntax></syntax>
      <syntax close="95">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x8f">
      <funcname color="0x3" opref="0x8f">sym.imp.scanf</funcname>
      <syntax></syntax>
      <syntax open="98">(</syntax>
      <syntax></syntax>
      <variable color="0x5" varref="0x2e2" opref="0x8f">0x80486b2</variable>
      <syntax></syntax>
      <op opref="0x8f">, </op>
      <syntax></syntax>
      <variable color="0x4" opref="0xe9">auStack_7c</variable>
      <syntax></syntax>
      <syntax close="98">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x96">
      <funcname color="0x3" opref="0x96">sym.check</funcname>
      <syntax></syntax>
      <syntax open="102">(</syntax>
      <syntax></syntax>
      <variable color="0x4" opref="0xea">auStack_7c</variable>
      <syntax></syntax>
      <syntax close="102">)</syntax>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
    <break indent="4"/>
    <statement opref="0x9d">
      <op color="0x0" opref="0x9d">return</op>
      <syntax> </syntax>
      <variable color="0x5" varref="0x1a3" opref="0x97">0</variable>
    </statement>
    <syntax></syntax>
    <syntax>;</syntax>
  </block>
  <break indent="0"/>
  <syntax>}</syntax>
  <break indent="0"/>
  <syntax></syntax>
</function></code></result>
--
<save_state loadersymbols="false">
  <typegrp/>
  <db>
    <property_changepoint space="register" offset="0x1100" val="0x20000000"/>
    <property_changepoint space="register" offset="0x110a" val="0x0"/>
    <property_changepoint space="register" offset="0x1110" val="0x20000000"/>
    <property_changepoint space="register" offset="0x111a" val="0x0"/>
    <property_changepoint space="register" offset="0x1120" val="0x20000000"/>
    <property_changepoint space="register" offset="0x112a" val="0x0"/>
    <property_changepoint space="register" offset="0x1130" val="0x20000000"/>
    <property_changepoint space="register" offset="0x113a" val="0x0"/>
    <property_changepoint space="register" offset="0x1140" val="0x20000000"/>
    <property_changepoint space="register" offset="0x114a" val="0x0"/>
    <property_changepoint space="register" offset="0x1150" val="0x20000000"/>
    <property_changepoint space="register" offset="0x115a" val="0x0"/>
    <property_changepoint space="register" offset="0x1160" val="0x20000000"/>
    <property_changepoint space="register" offset="0x116a" val="0x0"/>
    <property_changepoint space="register" offset="0x1170" val="0x20000000"/>
    <property_changepoint space="register" offset="0x117a" val="0x0"/>
      <rangelist/>
      <symbollist>
        <mapsym>
            <addr space="ram" offset="0x8048540"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffff5f"/>
                  <range space="stack" first="0xffffff68" last="0xfffffffb"/>
                </rangelist>
                <symbollist>
                  <mapsym>
                      <type name="" size="120" metatype="array" arraysize="120">
                      </type>
                    </symbol>
                    <addr space="stack" offset="0xffffff84"/>
                    <rangelist/>
                  </mapsym>
                </symbollist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="register" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048540"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <type name="" size="25" metatype="array" arraysize="25">
            </type>
          </symbol>
          <addr space="ram" offset="0x804868e"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <type name="" size="11" metatype="array" arraysize="11">
            </type>
          </symbol>
          <addr space="ram" offset="0x80486a7"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x80484c8"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x80484c8"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048394"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048394"/>
          <rangelist/>
        </mapsym>
        <mapsym>
            <addr space="ram" offset="0x8048374"/>
            <localdb main="stack" lock="false">
                <rangelist>
                  <range space="stack" first="0x4" last="0x1f7"/>
                  <range space="stack" first="0xfff0bdc0" last="0xffffffff"/>
                </rangelist>
              </scope>
            </localdb>
            <prototype model="__cdecl" extrapop="4">
              <returnsym>
                <addr space="stack" offset="0x0" size="4"/>
              </returnsym>
            </prototype>
          </function>
          <addr space="ram" offset="0x8048374"/>
          <rangelist/>
        </mapsym>
      </symbollist>
    </scope>
  </db>
  <context_points>
    <context_pointset space="ram" offset="0x0">
      <set name="addrsize" val="0x1"/>
      <set name="bit64" val="0x0"/>
      <set name="evexAAA" val="0x0"/>
      <set name="evexB" val="0x0"/>
      <set name="evexBType" val="0x0"/>
      <set name="evexD8Type" val="0x0"/>
      <set name="evexDisp8" val="0x0"/>
      <set name="evexL" val="0x0"/>
      <set name="evexLp" val="0x0"/>
      <set name="evexRp" val="0x0"/>
      <set name="evexTType" val="0x0"/>
      <set name="evexV5" val="0x0"/>
      <set name="evexVp" val="0x0"/>
      <set name="evexZ" val="0x0"/>
      <set name="highseg" val="0x0"/>
      <set name="instrPhase" val="0x0"/>
      <set name="lockprefx" val="0x0"/>
      <set name="mandover" val="0x0"/>
      <set name="opsize" val="0x1"/>
      <set name="prefix_66" val="0x0"/>
      <set name="prefix_f2" val="0x0"/>
      <set name="prefix_f3" val="0x0"/>
      <set name="repneprefx" val="0x0"/>
      <set name="repprefx" val="0x0"/>
      <set name="reserved" val="0x0"/>
      <set name="reservedHigh" val="0x0"/>
      <set name="rexBprefix" val="0x0"/>
      <set name="rexRprefix" val="0x0"/>
      <set name="rexWRXBprefix" val="0x0"/>
      <set name="rexWprefix" val="0x0"/>
      <set name="rexXprefix" val="0x0"/>
      <set name="rexprefix" val="0x0"/>
      <set name="segover" val="0x0"/>
      <set name="suffix3D" val="0x0"/>
      <set name="vexHighV" val="0x0"/>
      <set name="vexL" val="0x0"/>
      <set name="vexMMMMM" val="0x0"/>
      <set name="vexMode" val="0x0"/>
      <set name="vexVVVV" val="0x0"/>
      <set name="vexVVVV_r64" val="0x0"/>
      <set name="xacquireprefx" val="0x0"/>
      <set name="xreleaseprefx" val="0x0"/>
    </context_pointset>
    <context_pointset space="register" offset="0x0">
      <set name="addrsize" val="0x0"/>
      <set name="bit64" val="0x0"/>
      <set name="evexAAA" val="0x0"/>
      <set name="evexB" val="0x0"/>
      <set name="evexBType" val="0x0"/>
      <set name="evexD8Type" val="0x0"/>
      <set name="evexDisp8" val="0x0"/>
      <set name="evexL" val="0x0"/>
      <set name="evexLp" val="0x0"/>
      <set name="evexRp" val="0x0"/>
      <set name="evexTType" val="0x0"/>
      <set name="evexV5" val="0x0"/>
      <set name="evexVp" val="0x0"/>
      <set name="evexZ" val="0x0"/>
      <set name="highseg" val="0x0"/>
      <set name="instrPhase" val="0x0"/>
      <set name="lockprefx" val="0x0"/>
      <set name="mandover" val="0x0"/>
      <set name="opsize" val="0x0"/>
      <set name="prefix_66" val="0x0"/>
      <set name="prefix_f2" val="0x0"/>
      <set name="prefix_f3" val="0x0"/>
      <set name="repneprefx" val="0x0"/>
      <set name="repprefx" val="0x0"/>
      <set name="reserved" val="0x0"/>
      <set name="reservedHigh" val="0x0"/>
      <set name="rexBprefix" val="0x0"/>
      <set name="rexRprefix" val="0x0"/>
      <set name="rexWRXBprefix" val="0x0"/>
      <set name="rexWprefix" val="0x0"/>
      <set name="rexXprefix" val="0x0"/>
      <set name="rexprefix" val="0x0"/>
      <set name="segover" val="0x0"/>
      <set name="suffix3D" val="0x0"/>
      <set name="vexHighV" val="0x0"/>
      <set name="vexL" val="0x0"/>
      <set name="vexMMMMM" val="0x0"/>
      <set name="vexMode" val="0x0"/>
      <set name="vexVVVV" val="0x0"/>
      <set name="vexVVVV_r64" val="0x0"/>
      <set name="xacquireprefx" val="0x0"/>
      <set name="xreleaseprefx" val="0x0"/>
    </context_pointset>
    <tracked_pointset space="ram" offset="0x0">
      <set space="register" offset="0x20a" size="1" val="0x0"/>
    </tracked_pointset>
  </context_points>
  <commentdb/>
  <stringmanage>
    <string>
      <addr space="ram" offset="0x804868e"/>
      <bytes trunc="false">
494f4c4920437261636b6d65204c6576656c2030
  7830350a0050617373776f72
</bytes>
      <string>
        <addr space="ram" offset="0x80486a7"/>
        <bytes trunc="false">
50617373776f72643a2000257300000000000000
  00ffffffffffffffffffffff
</bytes>
      </stringmanage>
    </save_state>
EOF
CMDS=<<EOF
s main
af
e scr.color=0
pdg
?e --
pdgo
?e --
pdg*
?e --
pdgx~!id=,<addr
?e --
pdgd~!id=,protectedMode
# ?e --
# e scr.color=3 - XXX: Make colors work on tests
# pdg
# ?e --
# pdgo
EOF
RUN

NAME=pdgo align
FILE=bins/elf/hello_world
ARGS=-B 0x1000000000000000
EXPECT=<<EOF
                          |
    0x10000000000007aa    |void main(void)
                          |
                          |{
                          |    int iVar1;
                          |    int iVar2;
                          |    int64_t iVar3;
                          |    
    0x10000000000007cf    |    iVar1 = sym.imp.strlen("Hello");
    0x10000000000007de    |    iVar2 = sym.imp.strlen(" r2-folks");
    0x10000000000007f6    |    iVar3 = sym.imp.malloc(iVar2 + iVar1 + 1);
    0x1000000000000804    |    if (iVar3 != 0) {
    0x1000000000000814    |        sym.imp.strcpy(iVar3,"Hello");
    0x1000000000000827    |        sym.imp.strcat(iVar3," r2-folks");
    0x1000000000000833    |        sym.imp.puts(iVar3);
    0x100000000000083f    |        sym.imp.free(iVar3);
                          |    }
    0x1000000000000846    |    return;
                          |}
                          |
EOF
CMDS=<<EOF
s main
af
pdgo
EOF
RUN

NAME=pdgs
FILE=-
EXPECT=<<EOF
6502:LE:16:default
65C02:LE:16:default
80251:BE:24:default
80390:BE:24:default
8051:BE:16:default
8051:BE:24:mx51
AARCH64:BE:32:ilp32
AARCH64:BE:64:v8A
AARCH64:LE:32:ilp32
AARCH64:LE:64:AppleSilicon
AARCH64:LE:64:v8A
ARM:BE:32:Cortex
ARM:BE:32:v4
ARM:BE:32:v4t
ARM:BE:32:v5
ARM:BE:32:v5t
ARM:BE:32:v6
ARM:BE:32:v7
ARM:BE:32:v8
ARM:BE:32:v8-m
ARM:BE:32:v8T
ARM:LE:32:Cortex
ARM:LE:32:v4
ARM:LE:32:v4t
ARM:LE:32:v5
ARM:LE:32:v5t
ARM:LE:32:v6
ARM:LE:32:v7
ARM:LE:32:v8
ARM:LE:32:v8-m
ARM:LE:32:v8T
ARM:LEBE:32:v7LEInstruction
ARM:LEBE:32:v8LEInstruction
DATA:BE:64:default
DATA:LE:64:default
JVM:BE:32:default
MCS96:LE:16:default
MIPS:BE:32:R6
MIPS:BE:32:default
MIPS:BE:32:micro
MIPS:BE:64:64-32R6addr
MIPS:BE:64:64-32addr
MIPS:BE:64:R6
MIPS:BE:64:default
MIPS:BE:64:micro
MIPS:BE:64:micro64-32addr
MIPS:LE:32:R6
MIPS:LE:32:default
MIPS:LE:32:micro
MIPS:LE:64:64-32R6addr
MIPS:LE:64:64-32addr
MIPS:LE:64:R6
MIPS:LE:64:default
MIPS:LE:64:micro
MIPS:LE:64:micro64-32addr
PowerPC:BE:32:4xx
PowerPC:BE:32:MPC8270
PowerPC:BE:32:QUICC
PowerPC:BE:32:default
PowerPC:BE:32:e500
PowerPC:BE:32:e500mc
PowerPC:BE:64:64-32addr
PowerPC:BE:64:A2-32addr
PowerPC:BE:64:A2ALT
PowerPC:BE:64:A2ALT-32addr
PowerPC:BE:64:VLE-32addr
PowerPC:BE:64:VLEALT-32addr
PowerPC:BE:64:default
PowerPC:LE:32:4xx
PowerPC:LE:32:QUICC
PowerPC:LE:32:default
PowerPC:LE:32:e500
PowerPC:LE:32:e500mc
PowerPC:LE:64:64-32addr
PowerPC:LE:64:A2-32addr
PowerPC:LE:64:A2ALT
PowerPC:LE:64:A2ALT-32addr
PowerPC:LE:64:default
RISCV:LE:32:RV32G
RISCV:LE:32:RV32GC
RISCV:LE:32:RV32I
RISCV:LE:32:RV32IC
RISCV:LE:32:RV32IMC
RISCV:LE:32:default
RISCV:LE:64:RV64G
RISCV:LE:64:RV64GC
RISCV:LE:64:RV64I
RISCV:LE:64:RV64IC
RISCV:LE:64:default
STM8:BE:16:default
STM8:BE:24:default
SuperH:BE:32:SH-1
SuperH:BE:32:SH-2
SuperH:BE:32:SH-2A
TI_MSP430:LE:16:default
TI_MSP430X:LE:32:default
V850:LE:32:default
Xtensa:BE:32:default
Xtensa:LE:32:default
avr32:BE:32:default
avr8:LE:16:atmega256
avr8:LE:16:default
avr8:LE:16:extended
avr8:LE:24:xmega
hexagon:LE:32:default
sparc:BE:32:default
sparc:BE:64:default
tricore:LE:32:default
tricore:LE:32:tc172x
tricore:LE:32:tc176x
tricore:LE:32:tc29x
x86:LE:16:Protected Mode
x86:LE:16:Real Mode
x86:LE:32:System Management Mode
x86:LE:32:default
x86:LE:64:compat32
x86:LE:64:default
z180:LE:16:default
z182:LE:16:default
z80:LE:16:default
z8401x:LE:16:default
EOF
CMDS=<<EOF
pdgs
EOF
RUN

NAME=pdgsd
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
push ebp
mov ebp, esp
sub esp, 0x88
and esp, 0xfffffff0
mov eax, 0
add eax, 0xf
add eax, 0xf
shr eax, 4
-----
0x08048540: PUSH EBP
    (unique,0x9c00,4) = COPY EBP
    ESP = INT_SUB ESP, 0x4
0x08048541: MOV EBP,ESP
    EBP = COPY ESP
0x08048543: SUB ESP,0x88
    CF = INT_LESS ESP, 0x88
    OF = INT_SBORROW ESP, 0x88
    ESP = INT_SUB ESP, 0x88
    SF = INT_SLESS ESP, 0x0
    ZF = INT_EQUAL ESP, 0x0
    (unique,0xdd80,4) = INT_AND ESP, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048549: AND ESP,0xfffffff0
    CF = COPY 0x0
    OF = COPY 0x0
    ESP = INT_AND ESP, 0xfffffff0
    SF = INT_SLESS ESP, 0x0
    ZF = INT_EQUAL ESP, 0x0
    (unique,0xdd80,4) = INT_AND ESP, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x0804854c: MOV EAX,0x0
    EAX = COPY 0x0
0x08048551: ADD EAX,0xf
    CF = INT_CARRY EAX, 0xf
    OF = INT_SCARRY EAX, 0xf
    EAX = INT_ADD EAX, 0xf
    SF = INT_SLESS EAX, 0x0
    ZF = INT_EQUAL EAX, 0x0
    (unique,0xdd80,4) = INT_AND EAX, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048554: ADD EAX,0xf
    CF = INT_CARRY EAX, 0xf
    OF = INT_SCARRY EAX, 0xf
    EAX = INT_ADD EAX, 0xf
    SF = INT_SLESS EAX, 0x0
    ZF = INT_EQUAL EAX, 0x0
    (unique,0xdd80,4) = INT_AND EAX, 0xff
    (unique,0xde00,1) = POPCOUNT (unique,0xdd80,4)
    (unique,0xde80,1) = INT_AND (unique,0xde00,1), 0x1
    PF = INT_EQUAL (unique,0xde80,1), 0x0
0x08048557: SHR EAX,0x4
    (unique,0x3ec00,4) = INT_AND 0x4, 0x1f
    (unique,0x3ec80,4) = COPY EAX
    EAX = INT_RIGHT EAX, (unique,0x3ec00,4)
    (unique,0x11280,1) = INT_NOTEQUAL (unique,0x3ec00,4), 0x0
    (unique,0x11300,4) = INT_SUB (unique,0x3ec00,4), 0x1
    (unique,0x11380,4) = INT_RIGHT (unique,0x3ec80,4), (unique,0x11300,4)
    (unique,0x11400,4) = INT_AND (unique,0x11380,4), 0x1
    (unique,0x11500,1) = INT_NOTEQUAL (unique,0x11400,4), 0x0
    (unique,0x11580,1) = BOOL_NEGATE (unique,0x11280,1)
    (unique,0x11600,1) = INT_AND (unique,0x11580,1), CF
    (unique,0x11680,1) = INT_AND (unique,0x11280,1), (unique,0x11500,1)
    CF = INT_OR (unique,0x11600,1), (unique,0x11680,1)
    (unique,0x11800,1) = INT_EQUAL (unique,0x3ec00,4), 0x1
    (unique,0x11900,1) = INT_SLESS (unique,0x3ec80,4), 0x0
    (unique,0x11980,1) = BOOL_NEGATE (unique,0x11800,1)
    (unique,0x11a00,1) = INT_AND (unique,0x11980,1), OF
    (unique,0x11a80,1) = INT_AND (unique,0x11800,1), (unique,0x11900,1)
    OF = INT_OR (unique,0x11a00,1), (unique,0x11a80,1)
    (unique,0xe000,1) = INT_NOTEQUAL (unique,0x3ec00,4), 0x0
    (unique,0xe100,1) = INT_SLESS EAX, 0x0
    (unique,0xe180,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe200,1) = INT_AND (unique,0xe180,1), SF
    (unique,0xe280,1) = INT_AND (unique,0xe000,1), (unique,0xe100,1)
    SF = INT_OR (unique,0xe200,1), (unique,0xe280,1)
    (unique,0xe400,1) = INT_EQUAL EAX, 0x0
    (unique,0xe480,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe500,1) = INT_AND (unique,0xe480,1), ZF
    (unique,0xe580,1) = INT_AND (unique,0xe000,1), (unique,0xe400,1)
    ZF = INT_OR (unique,0xe500,1), (unique,0xe580,1)
    (unique,0xe680,4) = INT_AND EAX, 0xff
    (unique,0xe700,1) = POPCOUNT (unique,0xe680,4)
    (unique,0xe780,1) = INT_AND (unique,0xe700,1), 0x1
    (unique,0xe880,1) = INT_EQUAL (unique,0xe780,1), 0x0
    (unique,0xe900,1) = BOOL_NEGATE (unique,0xe000,1)
    (unique,0xe980,1) = INT_AND (unique,0xe900,1), PF
    (unique,0xea00,1) = INT_AND (unique,0xe000,1), (unique,0xe880,1)
    PF = INT_OR (unique,0xe980,1), (unique,0xea00,1)
EOF
CMDS=<<EOF
s main
pi 8
?e -----
pdgsd 8~!STORE
EOF
RUN

NAME=comments
FILE=bins/elf/crackme0x05
EXPECT=<<EOF

uint main(void)

{
    uchar auStack_7c [120];
    
    //main starts here
    //printf call here
    sym.imp.printf("IOLI Crackme Level 0x05\n");
    sym.imp.printf("Password: ");
    //scanf call here
    sym.imp.scanf(0x80486b2,auStack_7c);
    sym.check(auStack_7c);
    //main returns here
    return 0;
}

EOF
CMDS=<<EOF
CCu base64:bWFpbiBzdGFydHMgaGVyZQ== @ 0x08048540
CCu base64:cHJpbnRmIGNhbGwgaGVyZQ== @ 0x08048566
CCu base64:bWFpbiByZXR1cm5zIGhlcmU= @ 0x0804859b
CCu base64:bm90aGluZyB0byBzZWUgaGVyZQ== @ 0x0804859c
CCu base64:c2NhbmYgY2FsbCBoZXJl @ 0x08048585
s main
af
pdg
EOF
RUN

NAME=comment-function_name-offset
FILE=bins/elf/crackme0x05
EXPECT=<<EOF
                  |
    0x08048540    |uint main(void)
                  |
                  |{
                  |    uchar auStack_7c [120];
                  |    
    0x08048540    |    //main starts here
    0x08048566    |    //printf call here
    0x08048566    |    sym.imp.printf("IOLI Crackme Level 0x05\n");
    0x08048572    |    sym.imp.printf("Password: ");
    0x08048585    |    //scanf call here
    0x08048585    |    sym.imp.scanf(0x80486b2,auStack_7c);
    0x08048590    |    sym.check(auStack_7c);
    0x0804859b    |    //main returns here
    0x0804859b    |    return 0;
                  |}
                  |
EOF
CMDS=<<EOF
CCu base64:bWFpbiBzdGFydHMgaGVyZQ== @ 0x08048540
CCu base64:cHJpbnRmIGNhbGwgaGVyZQ== @ 0x08048566
CCu base64:bWFpbiByZXR1cm5zIGhlcmU= @ 0x0804859b
CCu base64:bm90aGluZyB0byBzZWUgaGVyZQ== @ 0x0804859c
CCu base64:c2NhbmYgY2FsbCBoZXJl @ 0x08048585
s main
af
pdgo
EOF
RUN

NAME=recursive type
FILE=bins/rec
CMDS=<<EOF
to bins/types_rec.h
aaa
s sym.KillList
afvt arg1 LL
afvt ptr LL
pdg
EOF
EXPECT=<<EOF

void sym.KillList(int64_t param_1)

{
    int64_t iVar1;
    ulong uStack_20;
    
    uStack_20 = param_1;
    while (uStack_20 != 0) {
        iVar1 = *(uStack_20 + 8);
        sym.imp.free(uStack_20);
        uStack_20 = iVar1;
    }
    return;
}

EOF
RUN
